{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dremio SQL Lakehouse Arrow Flight Client","text":"<p>Arrow Flight is a high-speed, distributed protocol designed to handle big data, providing increase in throughput between client applications and Dremio. This Dremio Arrow Flight Client is based on python official examples.</p> <p>Disclaimer: This project is not affliated to dremio in any way. It is a tool that I developed while at CIFOR-ICRAF and now we have decided to open source it for wider community use. While I may not have enough time to actively maintain it, the tool is stable enough to sustain future use cases. Besides, community contribution is warmly welcome in form of PRs and forks.</p> <ul> <li>Documentation: https://jaysnm.github.io/dremio-arrow/</li> <li>GitHub: https://github.com/jaysnm/dremio-arrow</li> <li>PyPI: https://pypi.org/project/dremio-arrow/</li> <li>Free software: Apache-2.0</li> </ul>"},{"location":"#flight-basics","title":"Flight Basics","text":"<p>The Arrow Flight libraries provide a development framework for implementing a service that can send and receive data streams. A Flight server supports several basic kinds of requests:</p> <ul> <li>Handshake: a simple request to determine whether the client is authorized and, in some cases, to establish an implementation-defined session token to use for future requests</li> <li>ListFlights: return a list of available data streams</li> <li>GetSchema: return the schema for a data stream</li> <li>GetFlightInfo: return an \u201caccess plan\u201d for a dataset of interest, possibly requiring consuming multiple data streams. This request can accept custom serialized commands containing, for example, your specific application parameters.</li> <li>DoGet: send a data stream to a client</li> <li>DoPut: receive a data stream from a client</li> <li>DoAction: perform an implementation-specific action and return any results, i.e. a generalized function call</li> <li>ListActions: return a list of available action types</li> </ul> <p>More details can be found here</p> <p></p>"},{"location":"#installation","title":"Installation","text":"<p>Please installation notes here</p>"},{"location":"api/","title":"API Reference","text":"<p>Top-level package for dremio-arrow-client.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#101-2022-06-16","title":"[1.0.1] - 2022-06-16","text":"<ul> <li>Initial stable release.</li> </ul>"},{"location":"changelog/#100-rc4-2022-06-16","title":"[1.0.0-rc4] - 2022-06-16","text":"<ul> <li>Paying for missing <code>1.0.0-rc4</code> changelog entry.</li> </ul>"},{"location":"changelog/#100-rc2-2022-06-16","title":"[1.0.0-rc2] - 2022-06-16","text":"<ul> <li>Being standard conformat</li> <li>Updated docs docker image</li> </ul>"},{"location":"changelog/#100-rc-2022-06-16","title":"[1.0.0-rc] - 2022-06-16","text":"<ul> <li>Typo fix on README.md</li> <li>Tested Release Candidate</li> </ul>"},{"location":"changelog/#100-beta1-2022-06-16","title":"[1.0.0-beta1] - 2022-06-16","text":"<ul> <li>Added package main module</li> <li>Documented package installation and use</li> <li>Added poetry package manager</li> <li>Added package tests</li> <li>Added dremio bootstrap script</li> <li>Using python3.10 as default interpreter</li> <li>Integrated Github Actions</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/jaysnm/dremio-arrow/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>dremio-arrow could always use more documentation, whether as part of the official dremio-arrow docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/jaysnm/dremio-arrow/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#contribution-journey","title":"Contribution Journey!","text":"<p>Ready to contribute? Here's how to set up <code>dremio-arrow</code> for local development.</p> <ul> <li> Fork the <code>dremio-arrow</code> repo on GitHub.</li> <li> <p> Clone your fork locally</p> <pre><code>$ git clone git@github.com:your_name_here/dremio-arrow.git\n</code></pre> </li> <li> <p> Ensure poetry is installed.</p> </li> <li> <p> Install dependencies and start your virtualenv:</p> <pre><code>$ poetry install -extras 'dev doc test'\n</code></pre> </li> <li> <p> configure pre-commit hooks</p> <pre><code>poetry run pre-commit install\npoetry run pre-commit install-hooks\n</code></pre> </li> <li> <p> Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p> Implement your changes and test them thoroughly</p> <pre><code># test code formating\nmake test\n# test code logic\nmake unittest\n\n# unit-test coverage\nmake coverage\n\n# ensure your code passes pre-commit checks\nmake pre-commit\n</code></pre> </li> <li> <p> If all the tests above pass, your contribution is only one step to winning a review! Test the client against supported python versions!</p> <pre><code>make multi\n</code></pre> </li> <li> <p> Commit your changes and push your branch to GitHub:</p> <pre><code>git add .\ngit commit -m \"Your detailed description of your changes.\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p> Submit a pull request through the GitHub website.</p> </li> </ul>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>The pull request should work for Python 3.6, 3.7, 3.8 and 3.9.</li> </ol>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run:</p> <pre><code>```\npoetry run bump2version patch # possible: major / minor / patch\ngit push\ngit push --tags\n```\n</code></pre> <p>GitHub Actions will then deploy to PyPI if tests pass.</p>"},{"location":"installation/","title":"Dremio SQL Lakehouse Arrow Flight Client Installation Guide","text":"<p>Arrow Flight is a high-speed, distributed protocol designed to handle big data, providing increase in throughput between client applications and Dremio.</p> <p>This Dremio Arrow Flight Client is based on python Official examples.</p> <p>Disclaimer: This project is not affliated to dremio in any way. It is a tool that I developed while at CIFOR-ICRAF and now we have decided to open source it for wider community use. While I may not have enough time to actively maintain it, the tool is stable enough to sustain future use cases. Besides, community contribution is warmly welcome in form of PRs and forks.</p> <p><code>dremio-arrow</code> package is available on PyPI and can be installed with <code>pip</code>, <code>poetry</code>, <code>conda</code> or from GitHub</p> <p></p>"},{"location":"installation/#installation-requirements","title":"Installation Requirements","text":"<ul> <li>A package manger :-&gt; Pip, Poetry or Conda</li> <li>Python (any of 3.7, 3.8, 3.9 or 3.10)</li> <li>Git if installing from source</li> </ul> Experimental Git Branches <p> The default main branch contains stable release. Please install the latest release on pypi or use code from the main branch when in doubt. For experimentations, feel free to use any branch accessible to you </p>"},{"location":"installation/#installing-the-package","title":"Installing the package","text":"<p>Supported Python Versions</p> <p>This package is thorougly tested against <code>python3.7</code>, <code>python3.8</code>, <code>python3.9</code> or <code>python3.10</code>. Other python3 versions might work but just note they have not been tested.</p> <p>Virtual Environment or Install on OS Filesystem?</p> <p>Personally I discourage installation on the python base libraries path. I consider it an <code>evil act</code> because it may cause unprecedented issues if the package is compromised (we are always onlook for security vulnerabilities but it is always good to be prepared for unexpected eventualities). In my opinion therefore, it is better to install the package (not just this but also all other packages that you use) in a virtual environment. Using a virtual environment also allows one to experiment with different python and/or package versions. If you are curious about this, please look at pyenv.</p>"},{"location":"installation/#installing-from-pypi-recomended","title":"Installing from PyPI (recomended)","text":"<p>Create a virtual environment and activate it.</p> <ul> <li>Using virtualenv </li> </ul> <pre><code>virtualenv -p python3 venv\nsource venv/bin/activate\n</code></pre> <ul> <li>Using python3's venv</li> </ul> <pre><code>python3 -m venv venv\nsource venv/bin/activate\n</code></pre> <p>Install the package using pip</p> <pre><code>pip install dremio-arrow\n</code></pre> <p>Install the package using poetry</p> <pre><code>poetry add dremio-arrow\n</code></pre> <p>Install the package using conda</p> <pre><code>- Create a conda environment\n```bash\nconda create -n myenv python=3.10\nsource activate myenv\n```\n\n- Install the package\n```bash\nconda install dremio-arrow\n```\n</code></pre>"},{"location":"installation/#installing-from-github-source","title":"Installing from github source","text":"<p>Clone the repository</p> <pre><code>git clone https://github.com/jaysnm/dremio-arrow.git\n</code></pre> <p>Change to the source directory <pre><code>cd dremio-arrow\n</code></pre></p> <p>Install the package using pip <pre><code>pip install -e .\n</code></pre> Install the package using poetry <pre><code>poetry install\n</code></pre></p> <p>Not using Linux or MacOS?</p> <p> This example assumes you are on MacOSX or Linux. If using Windows or any other OS, kindly look for their respective documentations on how to use a virtual environment in the command prompt.</p> Development Dependencies <p>Besides <code>pyarrow</code> and <code>pandas</code>, the package ships with optional dependencies used during development. Installation of these dependencies is only required if you intend to contribute some changes into the package. Please see Contributing Guidlines.</p>"},{"location":"usage-python/","title":"API Overview","text":"<p><code>dremio-arrow</code> package is a single module Python API that exposes two methods; a class <code>DremioArrowClient</code> and a function <code>dremio_query</code>. <code>DremioArrowClient</code> class implements flight middlewares and is the gateway to dremio flight server. <code>dremio_query</code> function is a shorthand to <code>DremioArrowClient</code> and a very fast way to invoke the client especially when re-use of client parameters is not useful!</p>"},{"location":"usage-python/#using-class-dremioarrowclient","title":"Using <code>class DremioArrowClient</code>","text":"<p>The class method is very useful for big applications where re-use of client parameters such as authentication token and workload management queues is important.</p> <pre><code>from dremioarrow import DremioArrowClient # (1)\nclient = DremioArrowClient(\nhost='dremio-server-host-ip/fqdn',\n    port='dremio-flight-server-port',\n    username='dremio-account-username',\n    password='dremio-account-password'\n) # (2)\nsql = 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10' # (3)\ndata = client.query(sql) # (4)\n# preview result data from dremio flight server\ndata # (5)\n</code></pre> <ol> <li> <p> First step is to import <code>DremioArrowClient</code>. This makes the client available on our working environment.</p> </li> <li> <p> Initialize the client with dremio flight server connection credentials. These are the credentials you use to access your dremio engine.</p> </li> <li> <p> Here you define SQL query string with data fetch instructions. The table name path must exist, whether as phisical or virtual dataset.</p> </li> <li> <p> We now execute our SQL query against dremio flight server.</p> </li> <li> <p> This step is not necessary but a way to preview the dataset we just fetched. Form here you have your data as a <code>pandas.DataFrame</code> and thus can proceed with analysis, processing and reporting bit.</p> </li> </ol> <p>'<code>Cleaner</code>' Credentials Provision</p> <p>Dremio flight server connection parameters can be supplied using environment variables. In that case, it is not necessary to supply the credentials when initializing the client.</p> Define Environment VariablesRefactor Client Access Code <p>Either export the variables in current terminal session or persist them on <code>~/.profile</code> (ubuntu) or <code>~/.zshrc</code> (Mac). To define the virables on current terminal session, execute below commands replacing placeholder texts with actual credential value.</p> <pre><code>export DREMIO_FLIGHT_SERVER_HOST='dremio-server-host-ip/fqdn'\nexport DREMIO_FLIGHT_SERVER_PORT='dremio-flight-server-port'\nexport DREMIO_FLIGHT_SERVER_USERNAME='dremio-account-username'\nexport DREMIO_FLIGHT_SERVER_PASSWORD='dremio-account-password'\n</code></pre> <p>To persist the environment variables, write them into <code>~/.profile</code> (ubuntu) or <code>~/.zshrc</code> (Mac).</p> <pre><code>vi ~/.zshrc # (1)\nsource ~/.zshrc # (2)\n</code></pre> <ol> <li> <p> Copy the enviroment variables into the file replacing placeholder texts with actual credential value. <pre><code>export DREMIO_FLIGHT_SERVER_HOST='dremio-server-host-ip/fqdn'\nexport DREMIO_FLIGHT_SERVER_PORT='dremio-flight-server-port'\nexport DREMIO_FLIGHT_SERVER_USERNAME='dremio-account-username'\nexport DREMIO_FLIGHT_SERVER_PASSWORD='dremio-account-password'\n</code></pre></p> </li> <li> <p> Refresh active terminal session variables. This step may deactivate the virtual environment variable depending on your OS platform. If this happens, re-activate the virtual environment. By persisting the variables, you are assured your project will work even after a restart of the machine. In addition, chances of commiting secret tokens into VCS spontaneously reduce!</p> </li> </ol> <pre><code>from dremioarrow import DremioArrowClient\n# note that we are nolonger setting connection parameters\nclient = DremioArrowClient()\nsql = 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10'\ndata = client.query(sql)\ndata\n</code></pre> <p>With the environment variables correctly set, we nolonger need to set connection credentials. The client is smart enough to extract the variables from the environmet!</p> <p>If we had a second query to execute, we would just have reused the client with a different SQL query string.</p> <pre><code># new SQL query with data fetch instructions\nsql = 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 100'\n# execute the SQL query against dremio flight server\ndata = client.query(sql) # (1)\n# preview result data from dremio flight server\ndata\n</code></pre> <p>We didn't create a new client</p> <p>In this repeat operation, we did not create a new client object, instead we reused the one we earlier created above!</p> Getting Help <p>For more information on client usage, see [API Reference] or run below chunk in your python interpreter.</p> <pre><code>from dremioarrow import DremioArrowClient\n\nhelp(DremioArrowClient)\n</code></pre>"},{"location":"usage-python/#using-function-dremio_query","title":"Using  <code>function dremio_query</code>","text":"<p>This function is very useful when we are interested in executing a single query and are not sure when a second query might be executed. The method takes authentication credentials and returns data. In essence, this is to mean session bearer token cannot be re-used because we are not using the client directly!</p> <pre><code>from dremioarrow import dremio_query # (1)\n# SQL query with data fetch instructions\nsql = 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10' # (2)\n# execute the query\ndata = dremio_query(\nsql=sql,\nhost='dremio-server-host-ip/fqdn',\nport='dremio-flight-server-port',\nusername='dremio-account-username',\npassword='dremio-account-password'\n) # (3)\n# preview data\ndata\n</code></pre> <ol> <li> <p> First step is to import <code>dremio_query</code> function.</p> </li> <li> <p> Define SQL query string with data fetch instructions.</p> </li> <li> <p> Execute the SQL query string against dremio flight server.</p> </li> </ol> <p>With credentials defined as environment variables, the above is refactired to:</p> <pre><code># import dremio_query method\nfrom dremioarrow import dremio_query\n# SQL query with data fetch instructions\nsql = 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10'\n# execute the query\ndata = dremio_query(sql=sql)\n# preview data\ndata\n</code></pre> Getting Help <p>For more information on the function usage, see [API Reference] or run below chunk in your python interpreter.</p> <pre><code>from dremioarrow import dremio_query\nhelp(dremio_query)\n</code></pre>"},{"location":"usage-r/","title":"API Overview","text":"<p><code>dremio-arrow</code> package is a single module Python API that exposes two methods; a class <code>DremioArrowClient</code> and a function <code>dremio_query</code>. <code>DremioArrowClient</code> class implements flight middlewares and is the gateway to dremio flight server. <code>dremio_query</code> function is a shorthand to <code>DremioArrowClient</code> and a very fast way to invoke the client especially when re-use of client parameters is not useful!</p> <p>Using the client in R environment</p> <p>While the client is developed in <code>python</code>, it can be used to interact with dremio flight engine; thanks to reticulate.</p> <p>From <code>{reticulate}</code>s official documentation, the reticulate package provides a comprehensive set of tools for interoperability between Python and R. The package includes facilities for:</p> <ul> <li> <p> Calling Python from R in a variety of ways including R Markdown, sourcing Python scripts, importing Python modules, and using Python interactively within an R session.</p> </li> <li> <p> Translation between R and Python objects (for example, between R and Pandas data frames, or between R matrices and NumPy arrays).</p> </li> <li> <p> Flexible binding to different versions of Python including virtual environments and Conda environments.</p> </li> </ul> <p>Given that the client outputs a <code>pandas.DataFrame</code> data, <code>reticulate</code> can conveniently convert the data to native <code>R data.frame</code> outside the box (no hacks whatsoever).</p> Handling python datetime objects <p>At the moment, conversion between <code>python datetime</code> and <code>R timestamp</code> is not well covered in <code>reticulate</code>. The client provides <code>ts_col</code> and <code>ts_fmt</code> extra options during query operation to enable conversion of <code>python datetime</code> to string counterpart.</p>"},{"location":"usage-r/#working-environment","title":"Working Environment","text":"<p>This example assumes you have <code>python3</code>, a virtual environment created and the client installed in the virtual environment. If this is not the case, See Python Downloads for python installation and Client Installation for virtual environment creation and client installation.</p>"},{"location":"usage-r/#install-reticulate","title":"Install reticulate","text":"<p><code>reticulate</code> is a <code>R</code> package and thus should be installed in <code>R</code> environment. Below commands can be executed in a <code>Rmarkdown</code>, <code>R script</code> or <code>R interpreter/terminal</code>.</p> <pre><code>install.packages(\"reticulate\", repos=\"https://cran.r-project.org\", deps=TRUE) # (1)\nlibrary(reticulate) # (2)\nuse_virtualenv(\"/path/to/vertual/environment\") # (3)\n</code></pre> <ol> <li> <p>Install required <code>R</code> package {reticulate} alongside its dependencies.</p> </li> <li> <p>Load <code>reticulate</code> package into working environment</p> </li> <li> <p>Set path to <code>python interpreter</code>. The <code>/path/to/vertual/environment</code> can be absolute or relative and should not include <code>bin/python</code> part. The path points to directory containing <code>bin/python</code>.</p> </li> </ol> <p>Now that we have the environment set, it is time to rea some data from dremio engine!</p>"},{"location":"usage-r/#using-class-dremioarrowclient","title":"using <code>class DremioArrowClient</code>","text":"<pre><code>dremio_client &lt;- import(\"dremioarrow\") # (1)\nclient &lt;- dremio_client$DremioArrowClient(\nhost='dremio-server-host-ip/fqdn',\nport='dremio-flight-server-port',\nusername='dremio-account-username',\npassword='dremio-account-password'\n) # (2)\nsql &lt;- 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10' # (3)\ndata &lt;- dremio_client$client.query(sql) # (4)\ndata # (5)\n</code></pre> <ol> <li> <p> First step is to import dremio client package into <code>R</code>. This makes the client available in our working environment.</p> </li> <li> <p> Initialize the client with dremio flight server connection credentials. These are the credentials you use to access your dremio engine.</p> </li> <li> <p> Here we define SQL query string with data fetch instructions. The table name path must exist, whether as phisical or virtual dataset.</p> </li> <li> <p> We now execute our SQL query against dremio flight server.</p> </li> <li> <p> This step is not necessary but a way to preview the dataset we just fetched. Form here you have your data as a <code>pandas.DataFrame</code> and thus can proceed with analysis, processing and reporting bit.</p> </li> </ol> <p>'<code>Cleaner</code>' Credentials Provision</p> <p>Dremio flight server connection parameters can be supplied using environment variables. In that case, it is not necessary to supply the credentials when initializing the client.</p> Define Environment VariablesRefactor Client Access Code <p>The environment variables can be defined by either exporting the variables in current terminal session (We can use them only if running R from the terminal), persist them on <code>~/.Renviron</code>, <code>~/.Rprofile</code>, <code>~/.profile</code> (ubuntu) or <code>~/.zshrc</code> (Mac).</p>"},{"location":"usage-r/#write-the-variables-into-renviron","title":"Write the variables into <code>/.Renviron</code>","text":"<p> .Renviron is a user-controllable file that can be used to create environment variables. This is especially useful to avoid including credentials like API keys inside R scripts. This file is written in a key-value format, so environment variables are created in the format: </p> <pre><code>DREMIO_FLIGHT_SERVER_HOST='dremio-server-host-ip/fqdn'\nDREMIO_FLIGHT_SERVER_PORT='dremio-flight-server-port'\nDREMIO_FLIGHT_SERVER_USERNAME='dremio-account-username'\nDREMIO_FLIGHT_SERVER_PASSWORD='dremio-account-password'\n</code></pre>"},{"location":"usage-r/#write-the-variables-into-rprofile","title":"Write the variables into <code>/.Rprofile</code>","text":"<p> R will source only one .Rprofile file. So if you have both a project-specific .Rprofile file and a user .Rprofile file that you want to use, you explicitly source the user-level .Rprofile at the top of your project-level .Rprofile with source(\"~/.Rprofile\"). <p>.Rprofile files are sourced as regular R code, so setting environment variables must be done inside a Sys.setenv(key = \"value\") call. </p> <pre><code>export DREMIO_FLIGHT_SERVER_HOST='dremio-server-host-ip/fqdn'\nexport DREMIO_FLIGHT_SERVER_PORT='dremio-flight-server-port'\nexport DREMIO_FLIGHT_SERVER_USERNAME='dremio-account-username'\nexport DREMIO_FLIGHT_SERVER_PASSWORD='dremio-account-password'\n</code></pre>"},{"location":"usage-r/#define-the-virables-on-current-terminal-session","title":"Define the virables on current terminal session","text":"<p>Execute below commands replacing placeholder texts with actual credential value.</p> <pre><code>export DREMIO_FLIGHT_SERVER_HOST='dremio-server-host-ip/fqdn'\nexport DREMIO_FLIGHT_SERVER_PORT='dremio-flight-server-port'\nexport DREMIO_FLIGHT_SERVER_USERNAME='dremio-account-username'\nexport DREMIO_FLIGHT_SERVER_PASSWORD='dremio-account-password'\n</code></pre>"},{"location":"usage-r/#write-the-variables-into-profile-ubuntu-or-zshrc-mac","title":"Write the variables into <code>~/.profile</code> (ubuntu) or <code>~/.zshrc</code> (Mac).","text":"<pre><code>vi ~/.zshrc # (1)\n</code></pre> <ol> <li> Copy the enviroment variables into the file replacing placeholder texts with actual credential value. <pre><code>export DREMIO_FLIGHT_SERVER_HOST='dremio-server-host-ip/fqdn'\nexport DREMIO_FLIGHT_SERVER_PORT='dremio-flight-server-port'\nexport DREMIO_FLIGHT_SERVER_USERNAME='dremio-account-username'\nexport DREMIO_FLIGHT_SERVER_PASSWORD='dremio-account-password'\n</code></pre></li> </ol> <p>Once done, exit all running applications and logout or restart the computer for the changes to take effect.</p> <pre><code># import client package\ndremio_client &lt;- import(\"dremioarrow\")\n# instatiate the client\nclient &lt;- dremio_client$DremioArrowClient()\n# define SQL query string\nsql &lt;- 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10'\n# fetch data\ndata &lt;- dremio_client$client.query(sql)\n# preview data\ndata\n</code></pre> <p>With the environment variables correctly set, we nolonger need to set connection credentials. The client is smart enough to extract the variables from the environmet!</p> <p>If we had a second query to execute, we would just have reused the client with a different SQL query string.</p> <pre><code># define new SQl query string\nsql &lt;- 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 100'\n# fetch data\ndata &lt;- dremio_client$client.query(sql) # 1\n# preview data\ndata\n</code></pre> <p>We didn't create a new client</p> <p>In this repeat operation, we did not create a new client object, instead we reused the one we earlier created above!</p>"},{"location":"usage-r/#using-function-dremio_query","title":"Using  <code>function dremio_query</code>","text":"<p>This function is very useful when we are interested in executing a single query and are not sure when a second query might be executed. The method takes authentication credentials and returns data. In essence, this is to mean session bearer token cannot be re-used because we are not using the client directly!</p> <pre><code>dremio_client &lt;- import(\"dremioarrow\") # (1)\n# SQL query with data fetch instructions\nsql &lt;- 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10' # (2)\n# execute the query\ndata &lt;- dremio_client$dremio_query(\nsql=sql,\nhost='dremio-server-host-ip/fqdn',\nport='dremio-flight-server-port',\nusername='dremio-account-username',\npassword='dremio-account-password'\n) # (3)\n# preview data\ndata\n</code></pre> <ol> <li> <p> First step is to import the client package.</p> </li> <li> <p> Define SQL query string with data fetch instructions.</p> </li> <li> <p> Execute the SQL query string against dremio flight server.</p> </li> </ol> <p>With credentials defined as environment variables, the above is refactired to:</p> <pre><code># import client package\ndremio_client &lt;- import(\"dremioarrow\")\n# SQL query with data fetch instructions\nsql &lt;- 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10'\n# execute the query\ndata &lt;- dremio_client$dremio_query()\n# preview data\ndata\n</code></pre>"},{"location":"usage/","title":"API Overview","text":"<p><code>dremio-arrow</code> package is a single module Python API that exposes two methods; a class <code>DremioArrowClient</code> and a function <code>dremio_query</code>. <code>DremioArrowClient</code> class implements flight middlewares and is the gateway to dremio flight server. <code>dremio_query</code> function is a shorthand to <code>DremioArrowClient</code> and a very fast way to invoke the client especially when re-use of client parameters is not useful!</p>"}]}