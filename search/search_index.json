{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dremio SQL Lakehouse Arrow Flight Client Arrow Flight is a high-speed, distributed protocol designed to handle big data, providing increase in throughput between client applications and Dremio. This Dremio Arrow Flight Client is based on python official examples . Disclaimer: This project is not affliated to dremio in any way. It is a tool that I developed while at CIFOR-ICRAF and now we have decided to open source it for wider community use. While I may not have enough time to actively maintain it, the tool is stable enough to sustain future use cases. Besides, community contribution is warmly welcome in form of PRs and forks. Documentation: https://jaysnm.github.io/dremio-arrow/ GitHub: https://github.com/jaysnm/dremio-arrow PyPI: https://pypi.org/project/dremio-arrow/ Free software: Apache-2.0 Flight Basics The Arrow Flight libraries provide a development framework for implementing a service that can send and receive data streams. A Flight server supports several basic kinds of requests: Handshake : a simple request to determine whether the client is authorized and, in some cases, to establish an implementation-defined session token to use for future requests ListFlights : return a list of available data streams GetSchema : return the schema for a data stream GetFlightInfo : return an \u201caccess plan\u201d for a dataset of interest, possibly requiring consuming multiple data streams. This request can accept custom serialized commands containing, for example, your specific application parameters. DoGet : send a data stream to a client DoPut : receive a data stream from a client DoAction : perform an implementation-specific action and return any results, i.e. a generalized function call ListActions : return a list of available action types More details can be found here Installation Please installation notes here","title":"Home"},{"location":"#dremio-sql-lakehouse-arrow-flight-client","text":"Arrow Flight is a high-speed, distributed protocol designed to handle big data, providing increase in throughput between client applications and Dremio. This Dremio Arrow Flight Client is based on python official examples . Disclaimer: This project is not affliated to dremio in any way. It is a tool that I developed while at CIFOR-ICRAF and now we have decided to open source it for wider community use. While I may not have enough time to actively maintain it, the tool is stable enough to sustain future use cases. Besides, community contribution is warmly welcome in form of PRs and forks. Documentation: https://jaysnm.github.io/dremio-arrow/ GitHub: https://github.com/jaysnm/dremio-arrow PyPI: https://pypi.org/project/dremio-arrow/ Free software: Apache-2.0","title":"Dremio SQL Lakehouse Arrow Flight Client"},{"location":"#flight-basics","text":"The Arrow Flight libraries provide a development framework for implementing a service that can send and receive data streams. A Flight server supports several basic kinds of requests: Handshake : a simple request to determine whether the client is authorized and, in some cases, to establish an implementation-defined session token to use for future requests ListFlights : return a list of available data streams GetSchema : return the schema for a data stream GetFlightInfo : return an \u201caccess plan\u201d for a dataset of interest, possibly requiring consuming multiple data streams. This request can accept custom serialized commands containing, for example, your specific application parameters. DoGet : send a data stream to a client DoPut : receive a data stream from a client DoAction : perform an implementation-specific action and return any results, i.e. a generalized function call ListActions : return a list of available action types More details can be found here","title":"Flight Basics"},{"location":"#installation","text":"Please installation notes here","title":"Installation"},{"location":"api/","text":"Top-level package for dremio-arrow-client. client Dremio Arrow Flight Client Main Module. This client draws heavily from official [Python Arrow Flight Client Application Example] (https://github.com/dremio-hub/arrow-flight-client-examples/tree/main/python). The Client negotiates request methods provided by flight server to retrive data. Arrow Flight Server Request Methods: Handshake: a simple request to determine whether the client is authorized ListFlights: return a list of available data streams GetSchema: return the schema for a data stream GetFlightInfo: return an \u201caccess plan\u201d for a dataset of interest DoGet: send a data stream to a client DoPut: receive a data stream from a client DoAction: perform an implementation-specific action and return any results ListActions: return a list of available action types More Details: Please see README.md file and official docs . DremioArrowClient Create a Client capable of running queries on Dremio Flight Server. Source code in dremioarrow/client.py class DremioArrowClient : \"\"\"Create a Client capable of running queries on Dremio Flight Server.\"\"\" def __init__ ( self , host : Optional [ str ] = os . environ . get ( 'DREMIO_FLIGHT_SERVER_HOST' , '127.0.0.1' ), port : Optional [ str ] = os . environ . get ( 'DREMIO_FLIGHT_SERVER_PORT' , '32010' ), username : Optional [ str ] = os . environ . get ( 'DREMIO_FLIGHT_SERVER_USERNAME' , '<username>' ), password : Optional [ str ] = os . environ . get ( 'DREMIO_FLIGHT_SERVER_PASSWORD' , '<password>' ), ): \"\"\"Initialize Dremio Flight Client with authentication credentials! You can opt to manually provide credentials or let the factory extract them from environment variables. Args: host: string Dremio Flight Server IP address, defaults to DREMIO_FLIGHT_SERVER_HOST environment variable port: string Dremio Flight Server port, defaults to DREMIO_FLIGHT_SERVER_PORT environment variable username: string Dremio Flight Server username, defaults to DREMIO_FLIGHT_SERVER_USERNAME environment variable password: string Dremio Flight Server password, defaults to DREMIO_FLIGHT_SERVER_PASSWORD environment variable \"\"\" # ensure the client was initialized with valid arguments if host is None : raise ValueError ( \"A valid dremio server host IP/FQDN is required and cannot be None!\" ) if port is None : raise ValueError ( \"A valid dremio flight server port is required and cannot be None!\" ) if username is None or username == \"<username>\" : raise ValueError ( \"A valid dremio server account username is required!\" ) if password is None or password == \"<password>\" : raise ValueError ( \"A valid dremio server account password is required!\" ) self . host = host self . port = port self . username = username self . password = password def create_flight_client ( self , scheme : str = \"grpc+tcp\" , connection_args : dict = {}): \"\"\"Create a Dremio Flight Client! Args: scheme: string Dremio Flight Server connection scheme, defaults to grpc+tcp (unencrypted TCP connection) connection_args: dict Dremio Flight Server connection arguments, defaults to empty dictionary Action: Creates a dremio flight client capable of negotiating request methods! \"\"\" self . client = flight . FlightClient ( f \" { scheme } :// { self . host } : { self . port } \" , middleware = [ DremioClientAuthMiddlewareFactory ()], ** connection_args ) def authenticate ( self , routing_tag : Optional [ str ] = None , routing_queue : Optional [ str ] = None ): \"\"\"Generate Dremio Flight Server Authentication Token! Args: routing_tag: str routing_queue: str These are `Dremio Enterprise Only Features` useful for workload management. The two workload management settings can be provided upon initial authneitcation. See [official docs](https://docs.dremio.com/advanced-administration/workload-management/) for more details. For dremio community edition, these settings are not useful. The default settings are sensible enough. Read https://docs.dremio.com/software/advanced-administration/job-queues/ for more details. Action: Sets client access token that can be used to query flight server! \"\"\" headers = [] if routing_tag is not None and routing_queue is not None : headers = [( b 'routing-tag' , str . encode ( routing_tag )), ( b 'routing-queue' , str . encode ( routing_queue ))] initial_options = flight . FlightCallOptions ( headers = headers ) try : # Authenticate user session. token = self . client . authenticate_basic_token ( self . username , self . password , initial_options ) except flight . FlightUnavailableError as err : raise ConnectionError ( f 'Server connection failed with Error: { err } ' ) except flight . FlightUnauthenticatedError as err : raise ConnectionError ( f \"Failed to authenticate user account with Error: { err } \" ) else : self . flight_options = flight . FlightCallOptions ( headers = [ token ]) def retrieve_ticket ( self , sql : str ): \"\"\"Get Dremio Flight Info! Args: sql: str SQL query to run on Dremio Flight Server Action: Generates a FlightInfo message to retrieve the Ticket corresponding to query result set \"\"\" try : self . ticket_info = self . client . get_flight_info ( flight . FlightDescriptor . for_command ( sql ), self . flight_options ) except Exception as error : raise SyntaxError ( f \"Failed to retrieve flight ticket info: { error } \" ) def query ( self , sql : str , ts_col : Optional [ str ] = None , ts_format : Optional [ str ] = None ) -> pd . DataFrame : \"\"\"Execute SQL command against Dremio Arrow Flight Server! Args: sql: str SQL query string to run on Dremio Engine ts_col: Optional[str] Date/DateTime column name. Useful for data conversions when fetching data for use in R environment. ts_format: Optional[str] Date/DateTime column output format. The ts_col data is converted to ts_format string. \\ This can later be converted to R Timestamp data objects from the char type! Returns: data: pd.DataFrame \"\"\" # create arrow flight client only if it's first time if not hasattr ( self , 'client' ): self . create_flight_client () # authenticate user session self . authenticate () # generate flight ticket self . retrieve_ticket ( sql ) try : # Retrieve the result set as a stream of Arrow record batches. reader = self . client . do_get ( self . ticket_info . endpoints [ 0 ] . ticket , self . flight_options ) except Exception as error : raise Exception ( f \"Failed to read query results from Dremio: { error } \" ) else : # convert arrow flight bytes stream to pandas dataframe df : pd . DataFrame = reader . read_pandas () # if ts_col and ts_format are defined, transform data types if ts_col is not None : if ts_col not in df . columns : raise ValueError ( f ''' { ts_col } is not a valid column name in the dataframe! ts_col parameter should be one of { list ( df . columns ) } ''' ) elif type ( df [ ts_col ] . iloc [ 0 ]) == pd . Timestamp or type ( df [ ts_col ] . iloc [ 0 ]) == date : if ts_format is not None : df [ ts_col ] = df [ ts_col ] . apply ( lambda ts : ts . strftime ( ts_format )) else : raise ValueError ( \"ts_format parameter is required when using ts_col to convert DateTime column to string!\" ) else : raise TypeError ( f ''' { ts_col } column is of invalid type { type ( df [ ts_col ] . iloc [ 0 ]) } . Expected a valid pandas.Timestamp, date or datetime type! ''' ) return df __init__ ( self , host = 'localhost' , port = '32010' , username = 'test_username' , password = 'test_password123' ) special Initialize Dremio Flight Client with authentication credentials! You can opt to manually provide credentials or let the factory extract them from environment variables. Parameters: Name Type Description Default host Optional[str] string Dremio Flight Server IP address, defaults to DREMIO_FLIGHT_SERVER_HOST environment variable 'localhost' port Optional[str] string Dremio Flight Server port, defaults to DREMIO_FLIGHT_SERVER_PORT environment variable '32010' username Optional[str] string Dremio Flight Server username, defaults to DREMIO_FLIGHT_SERVER_USERNAME environment variable 'test_username' password Optional[str] string Dremio Flight Server password, defaults to DREMIO_FLIGHT_SERVER_PASSWORD environment variable 'test_password123' Source code in dremioarrow/client.py def __init__ ( self , host : Optional [ str ] = os . environ . get ( 'DREMIO_FLIGHT_SERVER_HOST' , '127.0.0.1' ), port : Optional [ str ] = os . environ . get ( 'DREMIO_FLIGHT_SERVER_PORT' , '32010' ), username : Optional [ str ] = os . environ . get ( 'DREMIO_FLIGHT_SERVER_USERNAME' , '<username>' ), password : Optional [ str ] = os . environ . get ( 'DREMIO_FLIGHT_SERVER_PASSWORD' , '<password>' ), ): \"\"\"Initialize Dremio Flight Client with authentication credentials! You can opt to manually provide credentials or let the factory extract them from environment variables. Args: host: string Dremio Flight Server IP address, defaults to DREMIO_FLIGHT_SERVER_HOST environment variable port: string Dremio Flight Server port, defaults to DREMIO_FLIGHT_SERVER_PORT environment variable username: string Dremio Flight Server username, defaults to DREMIO_FLIGHT_SERVER_USERNAME environment variable password: string Dremio Flight Server password, defaults to DREMIO_FLIGHT_SERVER_PASSWORD environment variable \"\"\" # ensure the client was initialized with valid arguments if host is None : raise ValueError ( \"A valid dremio server host IP/FQDN is required and cannot be None!\" ) if port is None : raise ValueError ( \"A valid dremio flight server port is required and cannot be None!\" ) if username is None or username == \"<username>\" : raise ValueError ( \"A valid dremio server account username is required!\" ) if password is None or password == \"<password>\" : raise ValueError ( \"A valid dremio server account password is required!\" ) self . host = host self . port = port self . username = username self . password = password authenticate ( self , routing_tag = None , routing_queue = None ) Generate Dremio Flight Server Authentication Token! Parameters: Name Type Description Default routing_tag Optional[str] str None routing_queue Optional[str] str None These are Dremio Enterprise Only Features useful for workload management. The two workload management settings can be provided upon initial authneitcation. See official docs for more details. For dremio community edition, these settings are not useful. The default settings are sensible enough. Read https://docs.dremio.com/software/advanced-administration/job-queues/ for more details. Action Sets client access token that can be used to query flight server! Source code in dremioarrow/client.py def authenticate ( self , routing_tag : Optional [ str ] = None , routing_queue : Optional [ str ] = None ): \"\"\"Generate Dremio Flight Server Authentication Token! Args: routing_tag: str routing_queue: str These are `Dremio Enterprise Only Features` useful for workload management. The two workload management settings can be provided upon initial authneitcation. See [official docs](https://docs.dremio.com/advanced-administration/workload-management/) for more details. For dremio community edition, these settings are not useful. The default settings are sensible enough. Read https://docs.dremio.com/software/advanced-administration/job-queues/ for more details. Action: Sets client access token that can be used to query flight server! \"\"\" headers = [] if routing_tag is not None and routing_queue is not None : headers = [( b 'routing-tag' , str . encode ( routing_tag )), ( b 'routing-queue' , str . encode ( routing_queue ))] initial_options = flight . FlightCallOptions ( headers = headers ) try : # Authenticate user session. token = self . client . authenticate_basic_token ( self . username , self . password , initial_options ) except flight . FlightUnavailableError as err : raise ConnectionError ( f 'Server connection failed with Error: { err } ' ) except flight . FlightUnauthenticatedError as err : raise ConnectionError ( f \"Failed to authenticate user account with Error: { err } \" ) else : self . flight_options = flight . FlightCallOptions ( headers = [ token ]) create_flight_client ( self , scheme = 'grpc+tcp' , connection_args = {}) Create a Dremio Flight Client! Parameters: Name Type Description Default scheme str string Dremio Flight Server connection scheme, defaults to grpc+tcp (unencrypted TCP connection) 'grpc+tcp' connection_args dict dict Dremio Flight Server connection arguments, defaults to empty dictionary {} Action Creates a dremio flight client capable of negotiating request methods! Source code in dremioarrow/client.py def create_flight_client ( self , scheme : str = \"grpc+tcp\" , connection_args : dict = {}): \"\"\"Create a Dremio Flight Client! Args: scheme: string Dremio Flight Server connection scheme, defaults to grpc+tcp (unencrypted TCP connection) connection_args: dict Dremio Flight Server connection arguments, defaults to empty dictionary Action: Creates a dremio flight client capable of negotiating request methods! \"\"\" self . client = flight . FlightClient ( f \" { scheme } :// { self . host } : { self . port } \" , middleware = [ DremioClientAuthMiddlewareFactory ()], ** connection_args ) query ( self , sql , ts_col = None , ts_format = None ) Execute SQL command against Dremio Arrow Flight Server! Parameters: Name Type Description Default sql str str SQL query string to run on Dremio Engine required ts_col Optional[str] Optional[str] Date/DateTime column name. Useful for data conversions when fetching data for use in R environment. None ts_format Optional[str] Optional[str] Date/DateTime column output format. The ts_col data is converted to ts_format string. This can later be converted to R Timestamp data objects from the char type! None Returns: Type Description data pd.DataFrame Source code in dremioarrow/client.py def query ( self , sql : str , ts_col : Optional [ str ] = None , ts_format : Optional [ str ] = None ) -> pd . DataFrame : \"\"\"Execute SQL command against Dremio Arrow Flight Server! Args: sql: str SQL query string to run on Dremio Engine ts_col: Optional[str] Date/DateTime column name. Useful for data conversions when fetching data for use in R environment. ts_format: Optional[str] Date/DateTime column output format. The ts_col data is converted to ts_format string. \\ This can later be converted to R Timestamp data objects from the char type! Returns: data: pd.DataFrame \"\"\" # create arrow flight client only if it's first time if not hasattr ( self , 'client' ): self . create_flight_client () # authenticate user session self . authenticate () # generate flight ticket self . retrieve_ticket ( sql ) try : # Retrieve the result set as a stream of Arrow record batches. reader = self . client . do_get ( self . ticket_info . endpoints [ 0 ] . ticket , self . flight_options ) except Exception as error : raise Exception ( f \"Failed to read query results from Dremio: { error } \" ) else : # convert arrow flight bytes stream to pandas dataframe df : pd . DataFrame = reader . read_pandas () # if ts_col and ts_format are defined, transform data types if ts_col is not None : if ts_col not in df . columns : raise ValueError ( f ''' { ts_col } is not a valid column name in the dataframe! ts_col parameter should be one of { list ( df . columns ) } ''' ) elif type ( df [ ts_col ] . iloc [ 0 ]) == pd . Timestamp or type ( df [ ts_col ] . iloc [ 0 ]) == date : if ts_format is not None : df [ ts_col ] = df [ ts_col ] . apply ( lambda ts : ts . strftime ( ts_format )) else : raise ValueError ( \"ts_format parameter is required when using ts_col to convert DateTime column to string!\" ) else : raise TypeError ( f ''' { ts_col } column is of invalid type { type ( df [ ts_col ] . iloc [ 0 ]) } . Expected a valid pandas.Timestamp, date or datetime type! ''' ) return df retrieve_ticket ( self , sql ) Get Dremio Flight Info! Parameters: Name Type Description Default sql str str SQL query to run on Dremio Flight Server required Action Generates a FlightInfo message to retrieve the Ticket corresponding to query result set Source code in dremioarrow/client.py def retrieve_ticket ( self , sql : str ): \"\"\"Get Dremio Flight Info! Args: sql: str SQL query to run on Dremio Flight Server Action: Generates a FlightInfo message to retrieve the Ticket corresponding to query result set \"\"\" try : self . ticket_info = self . client . get_flight_info ( flight . FlightDescriptor . for_command ( sql ), self . flight_options ) except Exception as error : raise SyntaxError ( f \"Failed to retrieve flight ticket info: { error } \" ) DremioClientAuthMiddleware ( ClientMiddleware ) Client-side middleware for a call, instantiated per RPC. The middleware extracts the bearer token from the authorization header. Methods call_completed(self, exception) - A callback when the call finishes. received_headers(self, headers) - A callback when headers are received. sending_headers(self) - A callback before headers are sent. Source code in dremioarrow/client.py class DremioClientAuthMiddleware ( flight . ClientMiddleware ): \"\"\"Client-side middleware for a call, instantiated per RPC. The middleware extracts the bearer token from the authorization header. Methods: - `call_completed(self, exception)` - A callback when the call finishes. - `received_headers(self, headers)` - A callback when headers are received. - `sending_headers(self)` - A callback before headers are sent. \"\"\" def __init__ ( self , factory : DremioClientAuthMiddlewareFactory ): \"\"\"Initialize middleware with DremioClientAuthMiddlewareFactory class object. Args: factory: DremioClientAuthMiddlewareFactory The factory to set call credentials if an authorization header with bearer token is returned by the Dremio server. \"\"\" self . factory = factory def received_headers ( self , headers ): \"\"\"Extract tokens from request headers!\"\"\" auth_header_key = 'authorization' if auth_header_key in headers . keys (): authorization_header = headers . get ( auth_header_key ) else : raise Exception ( 'Did not receive authorization header back from server.' ) self . factory . set_call_credential ([ b 'authorization' , authorization_header [ 0 ] . encode ( \"utf-8\" )]) __init__ ( self , factory ) special Initialize middleware with DremioClientAuthMiddlewareFactory class object. Parameters: Name Type Description Default factory DremioClientAuthMiddlewareFactory DremioClientAuthMiddlewareFactory The factory to set call credentials if an authorization header with bearer token is returned by the Dremio server. required Source code in dremioarrow/client.py def __init__ ( self , factory : DremioClientAuthMiddlewareFactory ): \"\"\"Initialize middleware with DremioClientAuthMiddlewareFactory class object. Args: factory: DremioClientAuthMiddlewareFactory The factory to set call credentials if an authorization header with bearer token is returned by the Dremio server. \"\"\" self . factory = factory received_headers ( self , headers ) Extract tokens from request headers! Source code in dremioarrow/client.py def received_headers ( self , headers ): \"\"\"Extract tokens from request headers!\"\"\" auth_header_key = 'authorization' if auth_header_key in headers . keys (): authorization_header = headers . get ( auth_header_key ) else : raise Exception ( 'Did not receive authorization header back from server.' ) self . factory . set_call_credential ([ b 'authorization' , authorization_header [ 0 ] . encode ( \"utf-8\" )]) DremioClientAuthMiddlewareFactory ( ClientMiddlewareFactory ) A factory that creates DremioClientAuthMiddleware(s). Source code in dremioarrow/client.py class DremioClientAuthMiddlewareFactory ( flight . ClientMiddlewareFactory ): \"\"\"A factory that creates DremioClientAuthMiddleware(s).\"\"\" def __init__ ( self ): \"\"\"Initialize Dremio Client Auth Middleware with empty credential values!\"\"\" self . call_credential = [] def start_call ( self , info ): \"\"\"Called at the start of an RPC. Creates client factory! This must be thread-safe and must not raise exceptions. Args: info: flight.CallInfo - Information about the call Returns: flight.ClientMiddleware - An instance of ClientMiddleware, or None if this call is not intercepted. \"\"\" return DremioClientAuthMiddleware ( self ) def set_call_credential ( self , call_credential ): \"\"\"Set credentials to extracted tokens!\"\"\" self . call_credential = call_credential __init__ ( self ) special Initialize Dremio Client Auth Middleware with empty credential values! Source code in dremioarrow/client.py def __init__ ( self ): \"\"\"Initialize Dremio Client Auth Middleware with empty credential values!\"\"\" self . call_credential = [] set_call_credential ( self , call_credential ) Set credentials to extracted tokens! Source code in dremioarrow/client.py def set_call_credential ( self , call_credential ): \"\"\"Set credentials to extracted tokens!\"\"\" self . call_credential = call_credential start_call ( self , info ) Called at the start of an RPC. Creates client factory! This must be thread-safe and must not raise exceptions. Parameters: Name Type Description Default info flight.CallInfo - Information about the call required Returns: flight.ClientMiddleware - An instance of ClientMiddleware, or None if this call is not intercepted. Source code in dremioarrow/client.py def start_call ( self , info ): \"\"\"Called at the start of an RPC. Creates client factory! This must be thread-safe and must not raise exceptions. Args: info: flight.CallInfo - Information about the call Returns: flight.ClientMiddleware - An instance of ClientMiddleware, or None if this call is not intercepted. \"\"\" return DremioClientAuthMiddleware ( self ) dremio_query ( sql , host = None , port = None , username = None , password = None , ts_col = None , ts_format = None ) Convenience method to run SQL query on Dremio Flight Server! Parameters: Name Type Description Default sql str str SQL query to run on Dremio Flight Server required host Optional[str] str Dremio Flight Server IP address, defaults to DREMIO_FLIGHT_SERVER_HOST environment variable None port Optional[str] int Dremio Flight Server port, defaults to DREMIO_FLIGHT_SERVER_PORT environment variable None username Optional[str] str Dremio Flight Server username, defaults to DREMIO_FLIGHT_SERVER_USERNAME environment variable None password Optional[str] str Dremio Flight Server password, defaults to DREMIO_FLIGHT_SERVER_PASSWORD environment variable None ts_col Optional[str] Optional[str] Date/DateTime column name. Useful for data conversions when fetching data for use in R environment. None ts_format Optional[str] Optional[str] Date/DateTime column output format. The ts_col data is converted to ts_format string. This can later be converted to R Timestamp data objects from the char type! None Returns: Type Description pd.DataFrame Pandas DataFrame containing SQL query results Source code in dremioarrow/client.py def dremio_query ( sql : str , host : Optional [ str ] = None , port : Optional [ str ] = None , username : Optional [ str ] = None , password : Optional [ str ] = None , ts_col : Optional [ str ] = None , ts_format : Optional [ str ] = None , ) -> pd . DataFrame : \"\"\"Convenience method to run SQL query on Dremio Flight Server! Args: sql: str SQL query to run on Dremio Flight Server host: str Dremio Flight Server IP address, defaults to DREMIO_FLIGHT_SERVER_HOST environment variable port: int Dremio Flight Server port, defaults to DREMIO_FLIGHT_SERVER_PORT environment variable username: str Dremio Flight Server username, defaults to DREMIO_FLIGHT_SERVER_USERNAME environment variable password: str Dremio Flight Server password, defaults to DREMIO_FLIGHT_SERVER_PASSWORD environment variable ts_col: Optional[str] Date/DateTime column name. Useful for data conversions when fetching data for use in R environment. ts_format: Optional[str] Date/DateTime column output format. The ts_col data is converted to ts_format string. \\ This can later be converted to R Timestamp data objects from the char type! Return: pd.DataFrame: Pandas DataFrame containing SQL query results \"\"\" # connection parameters from function params = { \"host\" : host , \"port\" : port , \"username\" : username , \"password\" : password } # exclude unset parameters args = { key : params . get ( key ) for key , value in params . items () if value is not None } flight_ = DremioArrowClient ( ** args ) return flight_ . query ( sql , ts_col = ts_col , ts_format = ts_format )","title":"API Reference"},{"location":"api/#dremioarrow.client","text":"Dremio Arrow Flight Client Main Module. This client draws heavily from official [Python Arrow Flight Client Application Example] (https://github.com/dremio-hub/arrow-flight-client-examples/tree/main/python). The Client negotiates request methods provided by flight server to retrive data. Arrow Flight Server Request Methods: Handshake: a simple request to determine whether the client is authorized ListFlights: return a list of available data streams GetSchema: return the schema for a data stream GetFlightInfo: return an \u201caccess plan\u201d for a dataset of interest DoGet: send a data stream to a client DoPut: receive a data stream from a client DoAction: perform an implementation-specific action and return any results ListActions: return a list of available action types More Details: Please see README.md file and official docs .","title":"client"},{"location":"api/#dremioarrow.client.DremioArrowClient","text":"Create a Client capable of running queries on Dremio Flight Server. Source code in dremioarrow/client.py class DremioArrowClient : \"\"\"Create a Client capable of running queries on Dremio Flight Server.\"\"\" def __init__ ( self , host : Optional [ str ] = os . environ . get ( 'DREMIO_FLIGHT_SERVER_HOST' , '127.0.0.1' ), port : Optional [ str ] = os . environ . get ( 'DREMIO_FLIGHT_SERVER_PORT' , '32010' ), username : Optional [ str ] = os . environ . get ( 'DREMIO_FLIGHT_SERVER_USERNAME' , '<username>' ), password : Optional [ str ] = os . environ . get ( 'DREMIO_FLIGHT_SERVER_PASSWORD' , '<password>' ), ): \"\"\"Initialize Dremio Flight Client with authentication credentials! You can opt to manually provide credentials or let the factory extract them from environment variables. Args: host: string Dremio Flight Server IP address, defaults to DREMIO_FLIGHT_SERVER_HOST environment variable port: string Dremio Flight Server port, defaults to DREMIO_FLIGHT_SERVER_PORT environment variable username: string Dremio Flight Server username, defaults to DREMIO_FLIGHT_SERVER_USERNAME environment variable password: string Dremio Flight Server password, defaults to DREMIO_FLIGHT_SERVER_PASSWORD environment variable \"\"\" # ensure the client was initialized with valid arguments if host is None : raise ValueError ( \"A valid dremio server host IP/FQDN is required and cannot be None!\" ) if port is None : raise ValueError ( \"A valid dremio flight server port is required and cannot be None!\" ) if username is None or username == \"<username>\" : raise ValueError ( \"A valid dremio server account username is required!\" ) if password is None or password == \"<password>\" : raise ValueError ( \"A valid dremio server account password is required!\" ) self . host = host self . port = port self . username = username self . password = password def create_flight_client ( self , scheme : str = \"grpc+tcp\" , connection_args : dict = {}): \"\"\"Create a Dremio Flight Client! Args: scheme: string Dremio Flight Server connection scheme, defaults to grpc+tcp (unencrypted TCP connection) connection_args: dict Dremio Flight Server connection arguments, defaults to empty dictionary Action: Creates a dremio flight client capable of negotiating request methods! \"\"\" self . client = flight . FlightClient ( f \" { scheme } :// { self . host } : { self . port } \" , middleware = [ DremioClientAuthMiddlewareFactory ()], ** connection_args ) def authenticate ( self , routing_tag : Optional [ str ] = None , routing_queue : Optional [ str ] = None ): \"\"\"Generate Dremio Flight Server Authentication Token! Args: routing_tag: str routing_queue: str These are `Dremio Enterprise Only Features` useful for workload management. The two workload management settings can be provided upon initial authneitcation. See [official docs](https://docs.dremio.com/advanced-administration/workload-management/) for more details. For dremio community edition, these settings are not useful. The default settings are sensible enough. Read https://docs.dremio.com/software/advanced-administration/job-queues/ for more details. Action: Sets client access token that can be used to query flight server! \"\"\" headers = [] if routing_tag is not None and routing_queue is not None : headers = [( b 'routing-tag' , str . encode ( routing_tag )), ( b 'routing-queue' , str . encode ( routing_queue ))] initial_options = flight . FlightCallOptions ( headers = headers ) try : # Authenticate user session. token = self . client . authenticate_basic_token ( self . username , self . password , initial_options ) except flight . FlightUnavailableError as err : raise ConnectionError ( f 'Server connection failed with Error: { err } ' ) except flight . FlightUnauthenticatedError as err : raise ConnectionError ( f \"Failed to authenticate user account with Error: { err } \" ) else : self . flight_options = flight . FlightCallOptions ( headers = [ token ]) def retrieve_ticket ( self , sql : str ): \"\"\"Get Dremio Flight Info! Args: sql: str SQL query to run on Dremio Flight Server Action: Generates a FlightInfo message to retrieve the Ticket corresponding to query result set \"\"\" try : self . ticket_info = self . client . get_flight_info ( flight . FlightDescriptor . for_command ( sql ), self . flight_options ) except Exception as error : raise SyntaxError ( f \"Failed to retrieve flight ticket info: { error } \" ) def query ( self , sql : str , ts_col : Optional [ str ] = None , ts_format : Optional [ str ] = None ) -> pd . DataFrame : \"\"\"Execute SQL command against Dremio Arrow Flight Server! Args: sql: str SQL query string to run on Dremio Engine ts_col: Optional[str] Date/DateTime column name. Useful for data conversions when fetching data for use in R environment. ts_format: Optional[str] Date/DateTime column output format. The ts_col data is converted to ts_format string. \\ This can later be converted to R Timestamp data objects from the char type! Returns: data: pd.DataFrame \"\"\" # create arrow flight client only if it's first time if not hasattr ( self , 'client' ): self . create_flight_client () # authenticate user session self . authenticate () # generate flight ticket self . retrieve_ticket ( sql ) try : # Retrieve the result set as a stream of Arrow record batches. reader = self . client . do_get ( self . ticket_info . endpoints [ 0 ] . ticket , self . flight_options ) except Exception as error : raise Exception ( f \"Failed to read query results from Dremio: { error } \" ) else : # convert arrow flight bytes stream to pandas dataframe df : pd . DataFrame = reader . read_pandas () # if ts_col and ts_format are defined, transform data types if ts_col is not None : if ts_col not in df . columns : raise ValueError ( f ''' { ts_col } is not a valid column name in the dataframe! ts_col parameter should be one of { list ( df . columns ) } ''' ) elif type ( df [ ts_col ] . iloc [ 0 ]) == pd . Timestamp or type ( df [ ts_col ] . iloc [ 0 ]) == date : if ts_format is not None : df [ ts_col ] = df [ ts_col ] . apply ( lambda ts : ts . strftime ( ts_format )) else : raise ValueError ( \"ts_format parameter is required when using ts_col to convert DateTime column to string!\" ) else : raise TypeError ( f ''' { ts_col } column is of invalid type { type ( df [ ts_col ] . iloc [ 0 ]) } . Expected a valid pandas.Timestamp, date or datetime type! ''' ) return df","title":"DremioArrowClient"},{"location":"api/#dremioarrow.client.DremioArrowClient.__init__","text":"Initialize Dremio Flight Client with authentication credentials! You can opt to manually provide credentials or let the factory extract them from environment variables. Parameters: Name Type Description Default host Optional[str] string Dremio Flight Server IP address, defaults to DREMIO_FLIGHT_SERVER_HOST environment variable 'localhost' port Optional[str] string Dremio Flight Server port, defaults to DREMIO_FLIGHT_SERVER_PORT environment variable '32010' username Optional[str] string Dremio Flight Server username, defaults to DREMIO_FLIGHT_SERVER_USERNAME environment variable 'test_username' password Optional[str] string Dremio Flight Server password, defaults to DREMIO_FLIGHT_SERVER_PASSWORD environment variable 'test_password123' Source code in dremioarrow/client.py def __init__ ( self , host : Optional [ str ] = os . environ . get ( 'DREMIO_FLIGHT_SERVER_HOST' , '127.0.0.1' ), port : Optional [ str ] = os . environ . get ( 'DREMIO_FLIGHT_SERVER_PORT' , '32010' ), username : Optional [ str ] = os . environ . get ( 'DREMIO_FLIGHT_SERVER_USERNAME' , '<username>' ), password : Optional [ str ] = os . environ . get ( 'DREMIO_FLIGHT_SERVER_PASSWORD' , '<password>' ), ): \"\"\"Initialize Dremio Flight Client with authentication credentials! You can opt to manually provide credentials or let the factory extract them from environment variables. Args: host: string Dremio Flight Server IP address, defaults to DREMIO_FLIGHT_SERVER_HOST environment variable port: string Dremio Flight Server port, defaults to DREMIO_FLIGHT_SERVER_PORT environment variable username: string Dremio Flight Server username, defaults to DREMIO_FLIGHT_SERVER_USERNAME environment variable password: string Dremio Flight Server password, defaults to DREMIO_FLIGHT_SERVER_PASSWORD environment variable \"\"\" # ensure the client was initialized with valid arguments if host is None : raise ValueError ( \"A valid dremio server host IP/FQDN is required and cannot be None!\" ) if port is None : raise ValueError ( \"A valid dremio flight server port is required and cannot be None!\" ) if username is None or username == \"<username>\" : raise ValueError ( \"A valid dremio server account username is required!\" ) if password is None or password == \"<password>\" : raise ValueError ( \"A valid dremio server account password is required!\" ) self . host = host self . port = port self . username = username self . password = password","title":"__init__()"},{"location":"api/#dremioarrow.client.DremioArrowClient.authenticate","text":"Generate Dremio Flight Server Authentication Token! Parameters: Name Type Description Default routing_tag Optional[str] str None routing_queue Optional[str] str None These are Dremio Enterprise Only Features useful for workload management. The two workload management settings can be provided upon initial authneitcation. See official docs for more details. For dremio community edition, these settings are not useful. The default settings are sensible enough. Read https://docs.dremio.com/software/advanced-administration/job-queues/ for more details. Action Sets client access token that can be used to query flight server! Source code in dremioarrow/client.py def authenticate ( self , routing_tag : Optional [ str ] = None , routing_queue : Optional [ str ] = None ): \"\"\"Generate Dremio Flight Server Authentication Token! Args: routing_tag: str routing_queue: str These are `Dremio Enterprise Only Features` useful for workload management. The two workload management settings can be provided upon initial authneitcation. See [official docs](https://docs.dremio.com/advanced-administration/workload-management/) for more details. For dremio community edition, these settings are not useful. The default settings are sensible enough. Read https://docs.dremio.com/software/advanced-administration/job-queues/ for more details. Action: Sets client access token that can be used to query flight server! \"\"\" headers = [] if routing_tag is not None and routing_queue is not None : headers = [( b 'routing-tag' , str . encode ( routing_tag )), ( b 'routing-queue' , str . encode ( routing_queue ))] initial_options = flight . FlightCallOptions ( headers = headers ) try : # Authenticate user session. token = self . client . authenticate_basic_token ( self . username , self . password , initial_options ) except flight . FlightUnavailableError as err : raise ConnectionError ( f 'Server connection failed with Error: { err } ' ) except flight . FlightUnauthenticatedError as err : raise ConnectionError ( f \"Failed to authenticate user account with Error: { err } \" ) else : self . flight_options = flight . FlightCallOptions ( headers = [ token ])","title":"authenticate()"},{"location":"api/#dremioarrow.client.DremioArrowClient.create_flight_client","text":"Create a Dremio Flight Client! Parameters: Name Type Description Default scheme str string Dremio Flight Server connection scheme, defaults to grpc+tcp (unencrypted TCP connection) 'grpc+tcp' connection_args dict dict Dremio Flight Server connection arguments, defaults to empty dictionary {} Action Creates a dremio flight client capable of negotiating request methods! Source code in dremioarrow/client.py def create_flight_client ( self , scheme : str = \"grpc+tcp\" , connection_args : dict = {}): \"\"\"Create a Dremio Flight Client! Args: scheme: string Dremio Flight Server connection scheme, defaults to grpc+tcp (unencrypted TCP connection) connection_args: dict Dremio Flight Server connection arguments, defaults to empty dictionary Action: Creates a dremio flight client capable of negotiating request methods! \"\"\" self . client = flight . FlightClient ( f \" { scheme } :// { self . host } : { self . port } \" , middleware = [ DremioClientAuthMiddlewareFactory ()], ** connection_args )","title":"create_flight_client()"},{"location":"api/#dremioarrow.client.DremioArrowClient.query","text":"Execute SQL command against Dremio Arrow Flight Server! Parameters: Name Type Description Default sql str str SQL query string to run on Dremio Engine required ts_col Optional[str] Optional[str] Date/DateTime column name. Useful for data conversions when fetching data for use in R environment. None ts_format Optional[str] Optional[str] Date/DateTime column output format. The ts_col data is converted to ts_format string. This can later be converted to R Timestamp data objects from the char type! None Returns: Type Description data pd.DataFrame Source code in dremioarrow/client.py def query ( self , sql : str , ts_col : Optional [ str ] = None , ts_format : Optional [ str ] = None ) -> pd . DataFrame : \"\"\"Execute SQL command against Dremio Arrow Flight Server! Args: sql: str SQL query string to run on Dremio Engine ts_col: Optional[str] Date/DateTime column name. Useful for data conversions when fetching data for use in R environment. ts_format: Optional[str] Date/DateTime column output format. The ts_col data is converted to ts_format string. \\ This can later be converted to R Timestamp data objects from the char type! Returns: data: pd.DataFrame \"\"\" # create arrow flight client only if it's first time if not hasattr ( self , 'client' ): self . create_flight_client () # authenticate user session self . authenticate () # generate flight ticket self . retrieve_ticket ( sql ) try : # Retrieve the result set as a stream of Arrow record batches. reader = self . client . do_get ( self . ticket_info . endpoints [ 0 ] . ticket , self . flight_options ) except Exception as error : raise Exception ( f \"Failed to read query results from Dremio: { error } \" ) else : # convert arrow flight bytes stream to pandas dataframe df : pd . DataFrame = reader . read_pandas () # if ts_col and ts_format are defined, transform data types if ts_col is not None : if ts_col not in df . columns : raise ValueError ( f ''' { ts_col } is not a valid column name in the dataframe! ts_col parameter should be one of { list ( df . columns ) } ''' ) elif type ( df [ ts_col ] . iloc [ 0 ]) == pd . Timestamp or type ( df [ ts_col ] . iloc [ 0 ]) == date : if ts_format is not None : df [ ts_col ] = df [ ts_col ] . apply ( lambda ts : ts . strftime ( ts_format )) else : raise ValueError ( \"ts_format parameter is required when using ts_col to convert DateTime column to string!\" ) else : raise TypeError ( f ''' { ts_col } column is of invalid type { type ( df [ ts_col ] . iloc [ 0 ]) } . Expected a valid pandas.Timestamp, date or datetime type! ''' ) return df","title":"query()"},{"location":"api/#dremioarrow.client.DremioArrowClient.retrieve_ticket","text":"Get Dremio Flight Info! Parameters: Name Type Description Default sql str str SQL query to run on Dremio Flight Server required Action Generates a FlightInfo message to retrieve the Ticket corresponding to query result set Source code in dremioarrow/client.py def retrieve_ticket ( self , sql : str ): \"\"\"Get Dremio Flight Info! Args: sql: str SQL query to run on Dremio Flight Server Action: Generates a FlightInfo message to retrieve the Ticket corresponding to query result set \"\"\" try : self . ticket_info = self . client . get_flight_info ( flight . FlightDescriptor . for_command ( sql ), self . flight_options ) except Exception as error : raise SyntaxError ( f \"Failed to retrieve flight ticket info: { error } \" )","title":"retrieve_ticket()"},{"location":"api/#dremioarrow.client.DremioClientAuthMiddleware","text":"Client-side middleware for a call, instantiated per RPC. The middleware extracts the bearer token from the authorization header. Methods call_completed(self, exception) - A callback when the call finishes. received_headers(self, headers) - A callback when headers are received. sending_headers(self) - A callback before headers are sent. Source code in dremioarrow/client.py class DremioClientAuthMiddleware ( flight . ClientMiddleware ): \"\"\"Client-side middleware for a call, instantiated per RPC. The middleware extracts the bearer token from the authorization header. Methods: - `call_completed(self, exception)` - A callback when the call finishes. - `received_headers(self, headers)` - A callback when headers are received. - `sending_headers(self)` - A callback before headers are sent. \"\"\" def __init__ ( self , factory : DremioClientAuthMiddlewareFactory ): \"\"\"Initialize middleware with DremioClientAuthMiddlewareFactory class object. Args: factory: DremioClientAuthMiddlewareFactory The factory to set call credentials if an authorization header with bearer token is returned by the Dremio server. \"\"\" self . factory = factory def received_headers ( self , headers ): \"\"\"Extract tokens from request headers!\"\"\" auth_header_key = 'authorization' if auth_header_key in headers . keys (): authorization_header = headers . get ( auth_header_key ) else : raise Exception ( 'Did not receive authorization header back from server.' ) self . factory . set_call_credential ([ b 'authorization' , authorization_header [ 0 ] . encode ( \"utf-8\" )])","title":"DremioClientAuthMiddleware"},{"location":"api/#dremioarrow.client.DremioClientAuthMiddleware.__init__","text":"Initialize middleware with DremioClientAuthMiddlewareFactory class object. Parameters: Name Type Description Default factory DremioClientAuthMiddlewareFactory DremioClientAuthMiddlewareFactory The factory to set call credentials if an authorization header with bearer token is returned by the Dremio server. required Source code in dremioarrow/client.py def __init__ ( self , factory : DremioClientAuthMiddlewareFactory ): \"\"\"Initialize middleware with DremioClientAuthMiddlewareFactory class object. Args: factory: DremioClientAuthMiddlewareFactory The factory to set call credentials if an authorization header with bearer token is returned by the Dremio server. \"\"\" self . factory = factory","title":"__init__()"},{"location":"api/#dremioarrow.client.DremioClientAuthMiddleware.received_headers","text":"Extract tokens from request headers! Source code in dremioarrow/client.py def received_headers ( self , headers ): \"\"\"Extract tokens from request headers!\"\"\" auth_header_key = 'authorization' if auth_header_key in headers . keys (): authorization_header = headers . get ( auth_header_key ) else : raise Exception ( 'Did not receive authorization header back from server.' ) self . factory . set_call_credential ([ b 'authorization' , authorization_header [ 0 ] . encode ( \"utf-8\" )])","title":"received_headers()"},{"location":"api/#dremioarrow.client.DremioClientAuthMiddlewareFactory","text":"A factory that creates DremioClientAuthMiddleware(s). Source code in dremioarrow/client.py class DremioClientAuthMiddlewareFactory ( flight . ClientMiddlewareFactory ): \"\"\"A factory that creates DremioClientAuthMiddleware(s).\"\"\" def __init__ ( self ): \"\"\"Initialize Dremio Client Auth Middleware with empty credential values!\"\"\" self . call_credential = [] def start_call ( self , info ): \"\"\"Called at the start of an RPC. Creates client factory! This must be thread-safe and must not raise exceptions. Args: info: flight.CallInfo - Information about the call Returns: flight.ClientMiddleware - An instance of ClientMiddleware, or None if this call is not intercepted. \"\"\" return DremioClientAuthMiddleware ( self ) def set_call_credential ( self , call_credential ): \"\"\"Set credentials to extracted tokens!\"\"\" self . call_credential = call_credential","title":"DremioClientAuthMiddlewareFactory"},{"location":"api/#dremioarrow.client.DremioClientAuthMiddlewareFactory.__init__","text":"Initialize Dremio Client Auth Middleware with empty credential values! Source code in dremioarrow/client.py def __init__ ( self ): \"\"\"Initialize Dremio Client Auth Middleware with empty credential values!\"\"\" self . call_credential = []","title":"__init__()"},{"location":"api/#dremioarrow.client.DremioClientAuthMiddlewareFactory.set_call_credential","text":"Set credentials to extracted tokens! Source code in dremioarrow/client.py def set_call_credential ( self , call_credential ): \"\"\"Set credentials to extracted tokens!\"\"\" self . call_credential = call_credential","title":"set_call_credential()"},{"location":"api/#dremioarrow.client.DremioClientAuthMiddlewareFactory.start_call","text":"Called at the start of an RPC. Creates client factory! This must be thread-safe and must not raise exceptions. Parameters: Name Type Description Default info flight.CallInfo - Information about the call required Returns: flight.ClientMiddleware - An instance of ClientMiddleware, or None if this call is not intercepted. Source code in dremioarrow/client.py def start_call ( self , info ): \"\"\"Called at the start of an RPC. Creates client factory! This must be thread-safe and must not raise exceptions. Args: info: flight.CallInfo - Information about the call Returns: flight.ClientMiddleware - An instance of ClientMiddleware, or None if this call is not intercepted. \"\"\" return DremioClientAuthMiddleware ( self )","title":"start_call()"},{"location":"api/#dremioarrow.client.dremio_query","text":"Convenience method to run SQL query on Dremio Flight Server! Parameters: Name Type Description Default sql str str SQL query to run on Dremio Flight Server required host Optional[str] str Dremio Flight Server IP address, defaults to DREMIO_FLIGHT_SERVER_HOST environment variable None port Optional[str] int Dremio Flight Server port, defaults to DREMIO_FLIGHT_SERVER_PORT environment variable None username Optional[str] str Dremio Flight Server username, defaults to DREMIO_FLIGHT_SERVER_USERNAME environment variable None password Optional[str] str Dremio Flight Server password, defaults to DREMIO_FLIGHT_SERVER_PASSWORD environment variable None ts_col Optional[str] Optional[str] Date/DateTime column name. Useful for data conversions when fetching data for use in R environment. None ts_format Optional[str] Optional[str] Date/DateTime column output format. The ts_col data is converted to ts_format string. This can later be converted to R Timestamp data objects from the char type! None Returns: Type Description pd.DataFrame Pandas DataFrame containing SQL query results Source code in dremioarrow/client.py def dremio_query ( sql : str , host : Optional [ str ] = None , port : Optional [ str ] = None , username : Optional [ str ] = None , password : Optional [ str ] = None , ts_col : Optional [ str ] = None , ts_format : Optional [ str ] = None , ) -> pd . DataFrame : \"\"\"Convenience method to run SQL query on Dremio Flight Server! Args: sql: str SQL query to run on Dremio Flight Server host: str Dremio Flight Server IP address, defaults to DREMIO_FLIGHT_SERVER_HOST environment variable port: int Dremio Flight Server port, defaults to DREMIO_FLIGHT_SERVER_PORT environment variable username: str Dremio Flight Server username, defaults to DREMIO_FLIGHT_SERVER_USERNAME environment variable password: str Dremio Flight Server password, defaults to DREMIO_FLIGHT_SERVER_PASSWORD environment variable ts_col: Optional[str] Date/DateTime column name. Useful for data conversions when fetching data for use in R environment. ts_format: Optional[str] Date/DateTime column output format. The ts_col data is converted to ts_format string. \\ This can later be converted to R Timestamp data objects from the char type! Return: pd.DataFrame: Pandas DataFrame containing SQL query results \"\"\" # connection parameters from function params = { \"host\" : host , \"port\" : port , \"username\" : username , \"password\" : password } # exclude unset parameters args = { key : params . get ( key ) for key , value in params . items () if value is not None } flight_ = DremioArrowClient ( ** args ) return flight_ . query ( sql , ts_col = ts_col , ts_format = ts_format )","title":"dremio_query()"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog . [Unreleased] [1.0.1] - 2022-06-16 Initial stable release. [1.0.0-rc4] - 2022-06-16 Paying for missing 1.0.0-rc4 changelog entry. [1.0.0-rc2] - 2022-06-16 Being standard conformat Updated docs docker image [1.0.0-rc] - 2022-06-16 Typo fix on README.md Tested Release Candidate [1.0.0-beta1] - 2022-06-16 Added package main module Documented package installation and use Added poetry package manager Added package tests Added dremio bootstrap script Using python3.10 as default interpreter Integrated Github Actions","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"[Unreleased]"},{"location":"changelog/#101-2022-06-16","text":"Initial stable release.","title":"[1.0.1] - 2022-06-16"},{"location":"changelog/#100-rc4-2022-06-16","text":"Paying for missing 1.0.0-rc4 changelog entry.","title":"[1.0.0-rc4] - 2022-06-16"},{"location":"changelog/#100-rc2-2022-06-16","text":"Being standard conformat Updated docs docker image","title":"[1.0.0-rc2] - 2022-06-16"},{"location":"changelog/#100-rc-2022-06-16","text":"Typo fix on README.md Tested Release Candidate","title":"[1.0.0-rc] - 2022-06-16"},{"location":"changelog/#100-beta1-2022-06-16","text":"Added package main module Documented package installation and use Added poetry package manager Added package tests Added dremio bootstrap script Using python3.10 as default interpreter Integrated Github Actions","title":"[1.0.0-beta1] - 2022-06-16"},{"location":"contributing/","text":"Contributing Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions Report Bugs Report bugs at https://github.com/jaysnm/dremio-arrow/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation dremio-arrow could always use more documentation, whether as part of the official dremio-arrow docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback The best way to send feedback is to file an issue at https://github.com/jaysnm/dremio-arrow/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Contribution Journey! Ready to contribute? Here's how to set up dremio-arrow for local development. Fork the dremio-arrow repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/dremio-arrow.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -extras 'dev doc test' configure pre-commit hooks 1 2 poetry run pre-commit install poetry run pre-commit install-hooks Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. Implement your changes and test them thoroughly 1 2 3 4 5 6 7 8 9 10 11 # test code formating make test # test code logic make unittest # unit-test coverage make coverage # ensure your code passes pre-commit checks make pre-commit If all the tests above pass, your contribution is only one step to winning a review! Test the client against supported python versions! 1 make multi Commit your changes and push your branch to GitHub: 1 2 3 git add . git commit -m \"Your detailed description of your changes.\" git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Deploying A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: 1 2 3 4 5 ``` poetry run bump2version patch # possible: major / minor / patch git push git push --tags ``` GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/jaysnm/dremio-arrow/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"dremio-arrow could always use more documentation, whether as part of the official dremio-arrow docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/jaysnm/dremio-arrow/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#contribution-journey","text":"Ready to contribute? Here's how to set up dremio-arrow for local development. Fork the dremio-arrow repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/dremio-arrow.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -extras 'dev doc test' configure pre-commit hooks 1 2 poetry run pre-commit install poetry run pre-commit install-hooks Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. Implement your changes and test them thoroughly 1 2 3 4 5 6 7 8 9 10 11 # test code formating make test # test code logic make unittest # unit-test coverage make coverage # ensure your code passes pre-commit checks make pre-commit If all the tests above pass, your contribution is only one step to winning a review! Test the client against supported python versions! 1 make multi Commit your changes and push your branch to GitHub: 1 2 3 git add . git commit -m \"Your detailed description of your changes.\" git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Contribution Journey!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9.","title":"Pull Request Guidelines"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: 1 2 3 4 5 ``` poetry run bump2version patch # possible: major / minor / patch git push git push --tags ``` GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Dremio SQL Lakehouse Arrow Flight Client Installation Guide Arrow Flight is a high-speed, distributed protocol designed to handle big data, providing increase in throughput between client applications and Dremio. This Dremio Arrow Flight Client is based on python Official examples . Disclaimer: This project is not affliated to dremio in any way. It is a tool that I developed while at CIFOR-ICRAF and now we have decided to open source it for wider community use. While I may not have enough time to actively maintain it, the tool is stable enough to sustain future use cases. Besides, community contribution is warmly welcome in form of PRs and forks. dremio-arrow package is available on PyPI and can be installed with pip , poetry , conda or from GitHub Installation Requirements A package manger :-> Pip , Poetry or Conda Python (any of 3.7, 3.8, 3.9 or 3.10) Git if installing from source Experimental Git Branches The default main branch contains stable release. Please install the latest release on pypi or use code from the main branch when in doubt. For experimentations, feel free to use any branch accessible to you Installing the package Supported Python Versions This package is thorougly tested against python3.7 , python3.8 , python3.9 or python3.10 . Other python3 versions might work but just note they have not been tested. Virtual Environment or Install on OS Filesystem? Personally I discourage installation on the python base libraries path. I consider it an evil act because it may cause unprecedented issues if the package is compromised (we are always onlook for security vulnerabilities but it is always good to be prepared for unexpected eventualities). In my opinion therefore, it is better to install the package (not just this but also all other packages that you use) in a virtual environment. Using a virtual environment also allows one to experiment with different python and/or package versions. If you are curious about this, please look at pyenv . Installing from PyPI (recomended) Create a virtual environment and activate it. Using virtualenv 1 2 virtualenv -p python3 venv source venv/bin/activate Using python3's venv 1 2 python3 -m venv venv source venv/bin/activate Install the package using pip 1 pip install dremio-arrow Install the package using poetry 1 poetry add dremio-arrow Install the package using conda 1 2 3 4 5 6 7 8 9 10 - Create a conda environment ```bash conda create -n myenv python=3.10 source activate myenv ``` - Install the package ```bash conda install dremio-arrow ``` Installing from github source Clone the repository 1 git clone https://github.com/jaysnm/dremio-arrow.git Change to the source directory 1 cd dremio-arrow Install the package using pip 1 pip install -e . Install the package using poetry 1 poetry install Not using Linux or MacOS? This example assumes you are on MacOSX or Linux . If using Windows or any other OS , kindly look for their respective documentations on how to use a virtual environment in the command prompt. Development Dependencies Besides pyarrow and pandas , the package ships with optional dependencies used during development. Installation of these dependencies is only required if you intend to contribute some changes into the package. Please see Contributing Guidlines .","title":"Installation"},{"location":"installation/#dremio-sql-lakehouse-arrow-flight-client-installation-guide","text":"Arrow Flight is a high-speed, distributed protocol designed to handle big data, providing increase in throughput between client applications and Dremio. This Dremio Arrow Flight Client is based on python Official examples . Disclaimer: This project is not affliated to dremio in any way. It is a tool that I developed while at CIFOR-ICRAF and now we have decided to open source it for wider community use. While I may not have enough time to actively maintain it, the tool is stable enough to sustain future use cases. Besides, community contribution is warmly welcome in form of PRs and forks. dremio-arrow package is available on PyPI and can be installed with pip , poetry , conda or from GitHub","title":"Dremio SQL Lakehouse Arrow Flight Client Installation Guide"},{"location":"installation/#installation-requirements","text":"A package manger :-> Pip , Poetry or Conda Python (any of 3.7, 3.8, 3.9 or 3.10) Git if installing from source Experimental Git Branches The default main branch contains stable release. Please install the latest release on pypi or use code from the main branch when in doubt. For experimentations, feel free to use any branch accessible to you","title":"Installation Requirements"},{"location":"installation/#installing-the-package","text":"Supported Python Versions This package is thorougly tested against python3.7 , python3.8 , python3.9 or python3.10 . Other python3 versions might work but just note they have not been tested. Virtual Environment or Install on OS Filesystem? Personally I discourage installation on the python base libraries path. I consider it an evil act because it may cause unprecedented issues if the package is compromised (we are always onlook for security vulnerabilities but it is always good to be prepared for unexpected eventualities). In my opinion therefore, it is better to install the package (not just this but also all other packages that you use) in a virtual environment. Using a virtual environment also allows one to experiment with different python and/or package versions. If you are curious about this, please look at pyenv .","title":"Installing the package"},{"location":"installation/#installing-from-pypi-recomended","text":"Create a virtual environment and activate it. Using virtualenv 1 2 virtualenv -p python3 venv source venv/bin/activate Using python3's venv 1 2 python3 -m venv venv source venv/bin/activate Install the package using pip 1 pip install dremio-arrow Install the package using poetry 1 poetry add dremio-arrow Install the package using conda 1 2 3 4 5 6 7 8 9 10 - Create a conda environment ```bash conda create -n myenv python=3.10 source activate myenv ``` - Install the package ```bash conda install dremio-arrow ```","title":"Installing from PyPI (recomended)"},{"location":"installation/#installing-from-github-source","text":"Clone the repository 1 git clone https://github.com/jaysnm/dremio-arrow.git Change to the source directory 1 cd dremio-arrow Install the package using pip 1 pip install -e . Install the package using poetry 1 poetry install Not using Linux or MacOS? This example assumes you are on MacOSX or Linux . If using Windows or any other OS , kindly look for their respective documentations on how to use a virtual environment in the command prompt. Development Dependencies Besides pyarrow and pandas , the package ships with optional dependencies used during development. Installation of these dependencies is only required if you intend to contribute some changes into the package. Please see Contributing Guidlines .","title":"Installing from github source"},{"location":"usage-python/","text":"API Overview dremio-arrow package is a single module Python API that exposes two methods; a class DremioArrowClient and a function dremio_query . DremioArrowClient class implements flight middlewares and is the gateway to dremio flight server. dremio_query function is a shorthand to DremioArrowClient and a very fast way to invoke the client especially when re-use of client parameters is not useful! Using class DremioArrowClient The class method is very useful for big applications where re-use of client parameters such as authentication token and workload management queues is important. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from dremioarrow import DremioArrowClient # (1) client = DremioArrowClient ( host = 'dremio-server-host-ip/fqdn' , port = 'dremio-flight-server-port' , username = 'dremio-account-username' , password = 'dremio-account-password' ) # (2) sql = 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10' # (3) data = client.query ( sql ) # (4) # preview result data from dremio flight server data # (5) First step is to import DremioArrowClient . This makes the client available on our working environment. Initialize the client with dremio flight server connection credentials. These are the credentials you use to access your dremio engine. Here you define SQL query string with data fetch instructions. The table name path must exist, whether as phisical or virtual dataset. We now execute our SQL query against dremio flight server. This step is not necessary but a way to preview the dataset we just fetched. Form here you have your data as a pandas.DataFrame and thus can proceed with analysis, processing and reporting bit. ' Cleaner ' Credentials Provision Dremio flight server connection parameters can be supplied using environment variables. In that case, it is not necessary to supply the credentials when initializing the client. Define Environment Variables Refactor Client Access Code Either export the variables in current terminal session or persist them on ~/.profile (ubuntu) or ~/.zshrc (Mac). To define the virables on current terminal session, execute below commands replacing placeholder texts with actual credential value. 1 2 3 4 export DREMIO_FLIGHT_SERVER_HOST = 'dremio-server-host-ip/fqdn' export DREMIO_FLIGHT_SERVER_PORT = 'dremio-flight-server-port' export DREMIO_FLIGHT_SERVER_USERNAME = 'dremio-account-username' export DREMIO_FLIGHT_SERVER_PASSWORD = 'dremio-account-password' To persist the environment variables, write them into ~/.profile (ubuntu) or ~/.zshrc (Mac). 1 2 3 vi ~/.zshrc # (1) source ~/.zshrc # (2) Copy the enviroment variables into the file replacing placeholder texts with actual credential value. 1 2 3 4 export DREMIO_FLIGHT_SERVER_HOST = 'dremio-server-host-ip/fqdn' export DREMIO_FLIGHT_SERVER_PORT = 'dremio-flight-server-port' export DREMIO_FLIGHT_SERVER_USERNAME = 'dremio-account-username' export DREMIO_FLIGHT_SERVER_PASSWORD = 'dremio-account-password' Refresh active terminal session variables. This step may deactivate the virtual environment variable depending on your OS platform. If this happens, re-activate the virtual environment. By persisting the variables, you are assured your project will work even after a restart of the machine. In addition, chances of commiting secret tokens into VCS spontaneously reduce! 1 2 3 4 5 6 7 8 9 from dremioarrow import DremioArrowClient # note that we are nolonger setting connection parameters client = DremioArrowClient () sql = 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10' data = client . query ( sql ) data With the environment variables correctly set, we nolonger need to set connection credentials. The client is smart enough to extract the variables from the environmet! If we had a second query to execute, we would just have reused the client with a different SQL query string. 1 2 3 4 5 6 7 8 # new SQL query with data fetch instructions sql = 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 100' # execute the SQL query against dremio flight server data = client . query ( sql ) # (1) # preview result data from dremio flight server data We didn't create a new client In this repeat operation, we did not create a new client object, instead we reused the one we earlier created above! Getting Help For more information on client usage, see [API Reference] or run below chunk in your python interpreter. 1 2 3 from dremioarrow import DremioArrowClient help(DremioArrowClient) Using function dremio_query This function is very useful when we are interested in executing a single query and are not sure when a second query might be executed. The method takes authentication credentials and returns data. In essence, this is to mean session bearer token cannot be re-used because we are not using the client directly! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from dremioarrow import dremio_query # (1) # SQL query with data fetch instructions sql = 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10' # (2) # execute the query data = dremio_query ( sql = sql , host = 'dremio-server-host-ip/fqdn' , port = 'dremio-flight-server-port' , username = 'dremio-account-username' , password = 'dremio-account-password' ) # (3) # preview data data First step is to import dremio_query function. Define SQL query string with data fetch instructions. Execute the SQL query string against dremio flight server. With credentials defined as environment variables, the above is refactired to: 1 2 3 4 5 6 7 8 9 10 11 # import dremio_query method from dremioarrow import dremio_query # SQL query with data fetch instructions sql = 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10' # execute the query data = dremio_query ( sql = sql ) # preview data data Getting Help For more information on the function usage, see [API Reference] or run below chunk in your python interpreter. 1 2 3 from dremioarrow import dremio_query help ( dremio_query )","title":"Python Example"},{"location":"usage-python/#api-overview","text":"dremio-arrow package is a single module Python API that exposes two methods; a class DremioArrowClient and a function dremio_query . DremioArrowClient class implements flight middlewares and is the gateway to dremio flight server. dremio_query function is a shorthand to DremioArrowClient and a very fast way to invoke the client especially when re-use of client parameters is not useful!","title":"API Overview"},{"location":"usage-python/#using-class-dremioarrowclient","text":"The class method is very useful for big applications where re-use of client parameters such as authentication token and workload management queues is important. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from dremioarrow import DremioArrowClient # (1) client = DremioArrowClient ( host = 'dremio-server-host-ip/fqdn' , port = 'dremio-flight-server-port' , username = 'dremio-account-username' , password = 'dremio-account-password' ) # (2) sql = 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10' # (3) data = client.query ( sql ) # (4) # preview result data from dremio flight server data # (5) First step is to import DremioArrowClient . This makes the client available on our working environment. Initialize the client with dremio flight server connection credentials. These are the credentials you use to access your dremio engine. Here you define SQL query string with data fetch instructions. The table name path must exist, whether as phisical or virtual dataset. We now execute our SQL query against dremio flight server. This step is not necessary but a way to preview the dataset we just fetched. Form here you have your data as a pandas.DataFrame and thus can proceed with analysis, processing and reporting bit. ' Cleaner ' Credentials Provision Dremio flight server connection parameters can be supplied using environment variables. In that case, it is not necessary to supply the credentials when initializing the client. Define Environment Variables Refactor Client Access Code Either export the variables in current terminal session or persist them on ~/.profile (ubuntu) or ~/.zshrc (Mac). To define the virables on current terminal session, execute below commands replacing placeholder texts with actual credential value. 1 2 3 4 export DREMIO_FLIGHT_SERVER_HOST = 'dremio-server-host-ip/fqdn' export DREMIO_FLIGHT_SERVER_PORT = 'dremio-flight-server-port' export DREMIO_FLIGHT_SERVER_USERNAME = 'dremio-account-username' export DREMIO_FLIGHT_SERVER_PASSWORD = 'dremio-account-password' To persist the environment variables, write them into ~/.profile (ubuntu) or ~/.zshrc (Mac). 1 2 3 vi ~/.zshrc # (1) source ~/.zshrc # (2) Copy the enviroment variables into the file replacing placeholder texts with actual credential value. 1 2 3 4 export DREMIO_FLIGHT_SERVER_HOST = 'dremio-server-host-ip/fqdn' export DREMIO_FLIGHT_SERVER_PORT = 'dremio-flight-server-port' export DREMIO_FLIGHT_SERVER_USERNAME = 'dremio-account-username' export DREMIO_FLIGHT_SERVER_PASSWORD = 'dremio-account-password' Refresh active terminal session variables. This step may deactivate the virtual environment variable depending on your OS platform. If this happens, re-activate the virtual environment. By persisting the variables, you are assured your project will work even after a restart of the machine. In addition, chances of commiting secret tokens into VCS spontaneously reduce! 1 2 3 4 5 6 7 8 9 from dremioarrow import DremioArrowClient # note that we are nolonger setting connection parameters client = DremioArrowClient () sql = 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10' data = client . query ( sql ) data With the environment variables correctly set, we nolonger need to set connection credentials. The client is smart enough to extract the variables from the environmet! If we had a second query to execute, we would just have reused the client with a different SQL query string. 1 2 3 4 5 6 7 8 # new SQL query with data fetch instructions sql = 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 100' # execute the SQL query against dremio flight server data = client . query ( sql ) # (1) # preview result data from dremio flight server data We didn't create a new client In this repeat operation, we did not create a new client object, instead we reused the one we earlier created above! Getting Help For more information on client usage, see [API Reference] or run below chunk in your python interpreter. 1 2 3 from dremioarrow import DremioArrowClient help(DremioArrowClient)","title":"Using class DremioArrowClient"},{"location":"usage-python/#using-function-dremio_query","text":"This function is very useful when we are interested in executing a single query and are not sure when a second query might be executed. The method takes authentication credentials and returns data. In essence, this is to mean session bearer token cannot be re-used because we are not using the client directly! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from dremioarrow import dremio_query # (1) # SQL query with data fetch instructions sql = 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10' # (2) # execute the query data = dremio_query ( sql = sql , host = 'dremio-server-host-ip/fqdn' , port = 'dremio-flight-server-port' , username = 'dremio-account-username' , password = 'dremio-account-password' ) # (3) # preview data data First step is to import dremio_query function. Define SQL query string with data fetch instructions. Execute the SQL query string against dremio flight server. With credentials defined as environment variables, the above is refactired to: 1 2 3 4 5 6 7 8 9 10 11 # import dremio_query method from dremioarrow import dremio_query # SQL query with data fetch instructions sql = 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10' # execute the query data = dremio_query ( sql = sql ) # preview data data Getting Help For more information on the function usage, see [API Reference] or run below chunk in your python interpreter. 1 2 3 from dremioarrow import dremio_query help ( dremio_query )","title":"Using  function dremio_query"},{"location":"usage-r/","text":"API Overview dremio-arrow package is a single module Python API that exposes two methods; a class DremioArrowClient and a function dremio_query . DremioArrowClient class implements flight middlewares and is the gateway to dremio flight server. dremio_query function is a shorthand to DremioArrowClient and a very fast way to invoke the client especially when re-use of client parameters is not useful! Using the client in R environment While the client is developed in python , it can be used to interact with dremio flight engine; thanks to reticulate . From {reticulate} s official documentation, the reticulate package provides a comprehensive set of tools for interoperability between Python and R. The package includes facilities for: Calling Python from R in a variety of ways including R Markdown, sourcing Python scripts, importing Python modules, and using Python interactively within an R session. Translation between R and Python objects (for example, between R and Pandas data frames, or between R matrices and NumPy arrays). Flexible binding to different versions of Python including virtual environments and Conda environments. Given that the client outputs a pandas.DataFrame data, reticulate can conveniently convert the data to native R data.frame outside the box (no hacks whatsoever). Handling python datetime objects At the moment, conversion between python datetime and R timestamp is not well covered in reticulate . The client provides ts_col and ts_fmt extra options during query operation to enable conversion of python datetime to string counterpart. Working Environment This example assumes you have python3 , a virtual environment created and the client installed in the virtual environment. If this is not the case, See Python Downloads for python installation and Client Installation for virtual environment creation and client installation. Install reticulate reticulate is a R package and thus should be installed in R environment. Below commands can be executed in a Rmarkdown , R script or R interpreter/terminal . 1 2 3 4 5 install.packages ( \"reticulate\" , repos = \"https://cran.r-project.org\" , deps = TRUE ) # (1) library ( reticulate ) # (2) use_virtualenv ( \"/path/to/vertual/environment\" ) # (3) Install required R package {reticulate} alongside its dependencies. Load reticulate package into working environment Set path to python interpreter . The /path/to/vertual/environment can be absolute or relative and should not include bin/python part. The path points to directory containing bin/python . Now that we have the environment set, it is time to rea some data from dremio engine! using class DremioArrowClient 1 2 3 4 5 6 7 8 9 10 11 12 13 14 dremio_client <- import ( \"dremioarrow\" ) # (1) client <- dremio_client $ DremioArrowClient ( host = 'dremio-server-host-ip/fqdn' , port = 'dremio-flight-server-port' , username = 'dremio-account-username' , password = 'dremio-account-password' ) # (2) sql <- 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10' # (3) data <- dremio_client $ client.query ( sql ) # (4) data # (5) First step is to import dremio client package into R . This makes the client available in our working environment. Initialize the client with dremio flight server connection credentials. These are the credentials you use to access your dremio engine. Here we define SQL query string with data fetch instructions. The table name path must exist, whether as phisical or virtual dataset. We now execute our SQL query against dremio flight server. This step is not necessary but a way to preview the dataset we just fetched. Form here you have your data as a pandas.DataFrame and thus can proceed with analysis, processing and reporting bit. ' Cleaner ' Credentials Provision Dremio flight server connection parameters can be supplied using environment variables. In that case, it is not necessary to supply the credentials when initializing the client. Define Environment Variables Refactor Client Access Code The environment variables can be defined by either exporting the variables in current terminal session (We can use them only if running R from the terminal), persist them on ~/.Renviron , ~/.Rprofile , ~/.profile (ubuntu) or ~/.zshrc (Mac). Write the variables into /.Renviron .Renviron is a user-controllable file that can be used to create environment variables. This is especially useful to avoid including credentials like API keys inside R scripts. This file is written in a key-value format, so environment variables are created in the format: 1 2 3 4 DREMIO_FLIGHT_SERVER_HOST = 'dremio-server-host-ip/fqdn' DREMIO_FLIGHT_SERVER_PORT = 'dremio-flight-server-port' DREMIO_FLIGHT_SERVER_USERNAME = 'dremio-account-username' DREMIO_FLIGHT_SERVER_PASSWORD = 'dremio-account-password' Write the variables into /.Rprofile R will source only one .Rprofile file. So if you have both a project-specific .Rprofile file and a user .Rprofile file that you want to use, you explicitly source the user-level .Rprofile at the top of your project-level .Rprofile with source(\"~/.Rprofile\"). .Rprofile files are sourced as regular R code, so setting environment variables must be done inside a Sys.setenv(key = \"value\") call. 1 2 3 4 export DREMIO_FLIGHT_SERVER_HOST = 'dremio-server-host-ip/fqdn' export DREMIO_FLIGHT_SERVER_PORT = 'dremio-flight-server-port' export DREMIO_FLIGHT_SERVER_USERNAME = 'dremio-account-username' export DREMIO_FLIGHT_SERVER_PASSWORD = 'dremio-account-password' Define the virables on current terminal session Execute below commands replacing placeholder texts with actual credential value. 1 2 3 4 export DREMIO_FLIGHT_SERVER_HOST = 'dremio-server-host-ip/fqdn' export DREMIO_FLIGHT_SERVER_PORT = 'dremio-flight-server-port' export DREMIO_FLIGHT_SERVER_USERNAME = 'dremio-account-username' export DREMIO_FLIGHT_SERVER_PASSWORD = 'dremio-account-password' Write the variables into ~/.profile (ubuntu) or ~/.zshrc (Mac). 1 vi ~/.zshrc # (1) Copy the enviroment variables into the file replacing placeholder texts with actual credential value. 1 2 3 4 export DREMIO_FLIGHT_SERVER_HOST = 'dremio-server-host-ip/fqdn' export DREMIO_FLIGHT_SERVER_PORT = 'dremio-flight-server-port' export DREMIO_FLIGHT_SERVER_USERNAME = 'dremio-account-username' export DREMIO_FLIGHT_SERVER_PASSWORD = 'dremio-account-password' Once done, exit all running applications and logout or restart the computer for the changes to take effect. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # import client package dremio_client <- import ( \"dremioarrow\" ) # instatiate the client client <- dremio_client $ DremioArrowClient () # define SQL query string sql <- 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10' # fetch data data <- dremio_client $ client.query ( sql ) # preview data data With the environment variables correctly set, we nolonger need to set connection credentials. The client is smart enough to extract the variables from the environmet! If we had a second query to execute, we would just have reused the client with a different SQL query string. 1 2 3 4 5 6 7 8 # define new SQl query string sql <- 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 100' # fetch data data <- dremio_client $ client.query ( sql ) # 1 # preview data data We didn't create a new client In this repeat operation, we did not create a new client object, instead we reused the one we earlier created above! Using function dremio_query This function is very useful when we are interested in executing a single query and are not sure when a second query might be executed. The method takes authentication credentials and returns data. In essence, this is to mean session bearer token cannot be re-used because we are not using the client directly! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 dremio_client <- import ( \"dremioarrow\" ) # (1) # SQL query with data fetch instructions sql <- 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10' # (2) # execute the query data <- dremio_client $ dremio_query ( sql = sql , host = 'dremio-server-host-ip/fqdn' , port = 'dremio-flight-server-port' , username = 'dremio-account-username' , password = 'dremio-account-password' ) # (3) # preview data data First step is to import the client package. Define SQL query string with data fetch instructions. Execute the SQL query string against dremio flight server. With credentials defined as environment variables, the above is refactired to: 1 2 3 4 5 6 7 8 9 10 11 # import client package dremio_client <- import ( \"dremioarrow\" ) # SQL query with data fetch instructions sql <- 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10' # execute the query data <- dremio_client $ dremio_query () # preview data data","title":"R Example"},{"location":"usage-r/#api-overview","text":"dremio-arrow package is a single module Python API that exposes two methods; a class DremioArrowClient and a function dremio_query . DremioArrowClient class implements flight middlewares and is the gateway to dremio flight server. dremio_query function is a shorthand to DremioArrowClient and a very fast way to invoke the client especially when re-use of client parameters is not useful! Using the client in R environment While the client is developed in python , it can be used to interact with dremio flight engine; thanks to reticulate . From {reticulate} s official documentation, the reticulate package provides a comprehensive set of tools for interoperability between Python and R. The package includes facilities for: Calling Python from R in a variety of ways including R Markdown, sourcing Python scripts, importing Python modules, and using Python interactively within an R session. Translation between R and Python objects (for example, between R and Pandas data frames, or between R matrices and NumPy arrays). Flexible binding to different versions of Python including virtual environments and Conda environments. Given that the client outputs a pandas.DataFrame data, reticulate can conveniently convert the data to native R data.frame outside the box (no hacks whatsoever). Handling python datetime objects At the moment, conversion between python datetime and R timestamp is not well covered in reticulate . The client provides ts_col and ts_fmt extra options during query operation to enable conversion of python datetime to string counterpart.","title":"API Overview"},{"location":"usage-r/#working-environment","text":"This example assumes you have python3 , a virtual environment created and the client installed in the virtual environment. If this is not the case, See Python Downloads for python installation and Client Installation for virtual environment creation and client installation.","title":"Working Environment"},{"location":"usage-r/#install-reticulate","text":"reticulate is a R package and thus should be installed in R environment. Below commands can be executed in a Rmarkdown , R script or R interpreter/terminal . 1 2 3 4 5 install.packages ( \"reticulate\" , repos = \"https://cran.r-project.org\" , deps = TRUE ) # (1) library ( reticulate ) # (2) use_virtualenv ( \"/path/to/vertual/environment\" ) # (3) Install required R package {reticulate} alongside its dependencies. Load reticulate package into working environment Set path to python interpreter . The /path/to/vertual/environment can be absolute or relative and should not include bin/python part. The path points to directory containing bin/python . Now that we have the environment set, it is time to rea some data from dremio engine!","title":"Install reticulate"},{"location":"usage-r/#using-class-dremioarrowclient","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 dremio_client <- import ( \"dremioarrow\" ) # (1) client <- dremio_client $ DremioArrowClient ( host = 'dremio-server-host-ip/fqdn' , port = 'dremio-flight-server-port' , username = 'dremio-account-username' , password = 'dremio-account-password' ) # (2) sql <- 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10' # (3) data <- dremio_client $ client.query ( sql ) # (4) data # (5) First step is to import dremio client package into R . This makes the client available in our working environment. Initialize the client with dremio flight server connection credentials. These are the credentials you use to access your dremio engine. Here we define SQL query string with data fetch instructions. The table name path must exist, whether as phisical or virtual dataset. We now execute our SQL query against dremio flight server. This step is not necessary but a way to preview the dataset we just fetched. Form here you have your data as a pandas.DataFrame and thus can proceed with analysis, processing and reporting bit. ' Cleaner ' Credentials Provision Dremio flight server connection parameters can be supplied using environment variables. In that case, it is not necessary to supply the credentials when initializing the client. Define Environment Variables Refactor Client Access Code The environment variables can be defined by either exporting the variables in current terminal session (We can use them only if running R from the terminal), persist them on ~/.Renviron , ~/.Rprofile , ~/.profile (ubuntu) or ~/.zshrc (Mac).","title":"using class DremioArrowClient"},{"location":"usage-r/#write-the-variables-into-renviron","text":".Renviron is a user-controllable file that can be used to create environment variables. This is especially useful to avoid including credentials like API keys inside R scripts. This file is written in a key-value format, so environment variables are created in the format: 1 2 3 4 DREMIO_FLIGHT_SERVER_HOST = 'dremio-server-host-ip/fqdn' DREMIO_FLIGHT_SERVER_PORT = 'dremio-flight-server-port' DREMIO_FLIGHT_SERVER_USERNAME = 'dremio-account-username' DREMIO_FLIGHT_SERVER_PASSWORD = 'dremio-account-password'","title":"Write the variables into /.Renviron"},{"location":"usage-r/#write-the-variables-into-rprofile","text":"R will source only one .Rprofile file. So if you have both a project-specific .Rprofile file and a user .Rprofile file that you want to use, you explicitly source the user-level .Rprofile at the top of your project-level .Rprofile with source(\"~/.Rprofile\"). .Rprofile files are sourced as regular R code, so setting environment variables must be done inside a Sys.setenv(key = \"value\") call. 1 2 3 4 export DREMIO_FLIGHT_SERVER_HOST = 'dremio-server-host-ip/fqdn' export DREMIO_FLIGHT_SERVER_PORT = 'dremio-flight-server-port' export DREMIO_FLIGHT_SERVER_USERNAME = 'dremio-account-username' export DREMIO_FLIGHT_SERVER_PASSWORD = 'dremio-account-password'","title":"Write the variables into /.Rprofile"},{"location":"usage-r/#define-the-virables-on-current-terminal-session","text":"Execute below commands replacing placeholder texts with actual credential value. 1 2 3 4 export DREMIO_FLIGHT_SERVER_HOST = 'dremio-server-host-ip/fqdn' export DREMIO_FLIGHT_SERVER_PORT = 'dremio-flight-server-port' export DREMIO_FLIGHT_SERVER_USERNAME = 'dremio-account-username' export DREMIO_FLIGHT_SERVER_PASSWORD = 'dremio-account-password'","title":"Define the virables on current terminal session"},{"location":"usage-r/#write-the-variables-into-profile-ubuntu-or-zshrc-mac","text":"1 vi ~/.zshrc # (1) Copy the enviroment variables into the file replacing placeholder texts with actual credential value. 1 2 3 4 export DREMIO_FLIGHT_SERVER_HOST = 'dremio-server-host-ip/fqdn' export DREMIO_FLIGHT_SERVER_PORT = 'dremio-flight-server-port' export DREMIO_FLIGHT_SERVER_USERNAME = 'dremio-account-username' export DREMIO_FLIGHT_SERVER_PASSWORD = 'dremio-account-password' Once done, exit all running applications and logout or restart the computer for the changes to take effect. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # import client package dremio_client <- import ( \"dremioarrow\" ) # instatiate the client client <- dremio_client $ DremioArrowClient () # define SQL query string sql <- 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10' # fetch data data <- dremio_client $ client.query ( sql ) # preview data data With the environment variables correctly set, we nolonger need to set connection credentials. The client is smart enough to extract the variables from the environmet! If we had a second query to execute, we would just have reused the client with a different SQL query string. 1 2 3 4 5 6 7 8 # define new SQl query string sql <- 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 100' # fetch data data <- dremio_client $ client.query ( sql ) # 1 # preview data data We didn't create a new client In this repeat operation, we did not create a new client object, instead we reused the one we earlier created above!","title":"Write the variables into ~/.profile (ubuntu) or ~/.zshrc (Mac)."},{"location":"usage-r/#using-function-dremio_query","text":"This function is very useful when we are interested in executing a single query and are not sure when a second query might be executed. The method takes authentication credentials and returns data. In essence, this is to mean session bearer token cannot be re-used because we are not using the client directly! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 dremio_client <- import ( \"dremioarrow\" ) # (1) # SQL query with data fetch instructions sql <- 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10' # (2) # execute the query data <- dremio_client $ dremio_query ( sql = sql , host = 'dremio-server-host-ip/fqdn' , port = 'dremio-flight-server-port' , username = 'dremio-account-username' , password = 'dremio-account-password' ) # (3) # preview data data First step is to import the client package. Define SQL query string with data fetch instructions. Execute the SQL query string against dremio flight server. With credentials defined as environment variables, the above is refactired to: 1 2 3 4 5 6 7 8 9 10 11 # import client package dremio_client <- import ( \"dremioarrow\" ) # SQL query with data fetch instructions sql <- 'SELECT * FROM Samples.\"samples.dremio.com\".\"Dremio University\".\"employees.parquet\" LIMIT 10' # execute the query data <- dremio_client $ dremio_query () # preview data data","title":"Using  function dremio_query"},{"location":"usage/","text":"API Overview dremio-arrow package is a single module Python API that exposes two methods; a class DremioArrowClient and a function dremio_query . DremioArrowClient class implements flight middlewares and is the gateway to dremio flight server. dremio_query function is a shorthand to DremioArrowClient and a very fast way to invoke the client especially when re-use of client parameters is not useful!","title":"Overview"},{"location":"usage/#api-overview","text":"dremio-arrow package is a single module Python API that exposes two methods; a class DremioArrowClient and a function dremio_query . DremioArrowClient class implements flight middlewares and is the gateway to dremio flight server. dremio_query function is a shorthand to DremioArrowClient and a very fast way to invoke the client especially when re-use of client parameters is not useful!","title":"API Overview"}]}